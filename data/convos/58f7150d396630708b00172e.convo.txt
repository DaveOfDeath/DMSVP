idRef {
  id: "58f7150d396630708b00172e"
}
ui_name: "Hub_DresdenComputer"
nodes {
  idRef {
    id: "590df13d3966308007004dc4"
  }
  index: 0
  text: "Welcome to Organ Grinders. Please log in with your user ID card, biometrics, or PIN code."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "58f7150d396630708b00172e:590df1693966308007004dd2"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "590df1693966308007004dd5"
  }
  index: 1
  text: ""
  branches {
    responseText: "4118"
    nextNodeIndex: 2
    idRef {
      id: "58f7150d396630708b00172e:590df15b3966308007004dc6"
    }
  }
  branches {
    responseText: "{{GM}}Drone Control 6{{/GM}} Use Drone Control Deck to spoof keycard RFID signal."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 10
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 6
        }
      }
    }
    nextNodeIndex: 2
    hideIfUnavailable: true
    idRef {
      id: "58f7150d396630708b00172e:590df15b3966308007004dcc"
    }
    inputBypass: true
    auxiliaryLink: true
  }
  branches {
    responseText: "{{GM}}Decking 6{{/GM}} crack the password protocol and gain entry to the system."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 6
        }
      }
    }
    nextNodeIndex: 2
    hideIfUnavailable: true
    idRef {
      id: "58f7150d396630708b00172e:590df15b3966308007004dc8"
    }
    inputBypass: true
    auxiliaryLink: true
  }
  branches {
    responseText: "{{GM}}Biotech 6{{/GM}} Spoof the biometric sensors to gain access"
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 11
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 6
        }
      }
    }
    nextNodeIndex: 2
    hideIfUnavailable: true
    idRef {
      id: "58f7150d396630708b00172e:590df15b3966308007004dca"
    }
    inputBypass: true
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_InputNumpad
  inputMaxLength: 4
  comment: "Computer Loop"
}
nodes {
  idRef {
    id: "5913ebc2396630c418006fef"
  }
  index: 2
  text: "Welcome, Doctor Dresden.\n\nPlease review our menu options, as our system has changed:\n{{CC}}Personnel{{/CC}}\n{{CC}}Payroll{{/CC}}\n{{CC}}Security{{/CC}}\n{{CC}}Data Backup{{/CC}}\n{{CC}}Donor Privacy{{/CC}}"
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "58f7150d396630708b00172e:5913ec22396630c418006ff1"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "5913ec22396630c418006ff4"
  }
  index: 3
  text: ""
  branches {
    responseText: "{{CC}}Personnel{{/CC}}"
    nextNodeIndex: 4
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "58f7150d396630708b00172e:5913ec48396630c418007012"
    }
  }
  branches {
    responseText: "{{CC}}Payroll{{/CC}}"
    nextNodeIndex: 5
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "58f7150d396630708b00172e:5913ec48396630c418007014"
    }
  }
  branches {
    responseText: "{{CC}}Security{{/CC}}"
    nextNodeIndex: 6
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "58f7150d396630708b00172e:5913ec48396630c418007016"
    }
  }
  branches {
    responseText: "{{CC}}Data Backup{{/CC}}"
    nextNodeIndex: 7
    idRef {
      id: "58f7150d396630708b00172e:5913ec48396630c418007018"
    }
  }
  branches {
    responseText: "{{CC}}Donor Privacy{{/CC}}"
    nextNodeIndex: 8
    idRef {
      id: "58f7150d396630708b00172e:5913ec48396630c41800701a"
    }
  }
  branches {
    responseText: "Search system for information about Ripper Killer."
    nextNodeIndex: 9
    idRef {
      id: "58f7150d396630708b00172e:5913ec49396630c41800701c"
    }
  }
  nodeType: ConversationNodeType_Simple
  comment: "Dresden Menu Loop"
}
nodes {
  idRef {
    id: "591e7ab3396630d823005d9c"
  }
  index: 4
  text: "The only employee listed at the Redmond Organ Grinders is Dresden.\n\nAll other employees, assistants, and medical staff have been reassigned to other offices."
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "58f7150d396630708b00172e:591e7b35396630d823005dea"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "591e7edb396630d823005dee"
  }
  index: 5
  text: "The payroll information is depressingly complicated. Without an advanced forensics accounting degree, you\'re unlikely to uncover anything here."
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "58f7150d396630708b00172e:591e7ede396630d823005df0"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "591e7eee396630d823005df5"
  }
  index: 6
  text: "Most of the physical and digital security here is to prevent the gangers from stealing medical supplies. \nNothing here is capable of slowing, let alone stopping an armed shadowrun team."
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "58f7150d396630708b00172e:591e7ef0396630d823005df7"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "591e7ef4396630d823005dfc"
  }
  index: 7
  text: "Data Redundancy System status:  OFFLINE."
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "58f7150d396630708b00172e:591e7ef7396630d823005dfe"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "591e7efb396630d823005e03"
  }
  index: 8
  text: "The legal document displayed is 43 pages long. \nIt\'s got all sort of legal language, loopholes, and errors that even an untrained public defender could destroy.\nIt\'s clearly just for show."
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "58f7150d396630708b00172e:591e7efe396630d823005e05"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "5913eca4396630c41800701f"
  }
  index: 9
  text: "A quick search by the most basic smartframe finds Dresden\'s notes about the killings... all of them. Even the ones that he didn\'t preside over the autopsies of, he attended or made notes."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "58f7150d396630708b00172e:5913ece2396630c418007021"
    }
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "5913ece8396630c418007024"
  }
  index: 10
  text: ""
  branches {
    responseText: "First Killing: Eisen, Pamela (SINless)"
    nextNodeIndex: 11
    idRef {
      id: "58f7150d396630708b00172e:5913ecec396630c418007026"
    }
  }
  branches {
    responseText: "Second Killing: Bolden, Eliza (UCAS, SINner)"
    nextNodeIndex: 12
    idRef {
      id: "58f7150d396630708b00172e:5913ecf7396630c41800702a"
    }
  }
  branches {
    responseText: "Third Killing: Williams, Hope (Corporate SIN)"
    nextNodeIndex: 13
    idRef {
      id: "58f7150d396630708b00172e:5913ecf6396630c418007028"
    }
  }
  branches {
    responseText: "Fourth Killing, Sam Watts (Criminal SINner)"
    nextNodeIndex: 14
    idRef {
      id: "58f7150d396630708b00172e:5913ecf7396630c41800702c"
    }
  }
  branches {
    responseText: "Fifth Killing, Lakota \"Lucy\" Sings with Wind (NAN, SINner)"
    nextNodeIndex: 15
    idRef {
      id: "58f7150d396630708b00172e:5913ecf7396630c41800702e"
    }
  }
  branches {
    responseText: "Sixth Killing, Jeremy Halfsky (Salish, SINner)"
    nextNodeIndex: 17
    idRef {
      id: "58f7150d396630708b00172e:5913ecf7396630c418007030"
    }
  }
  branches {
    responseText: "{{GM}}Delete the records.{{/GM}}"
    nextNodeIndex: 18
    idRef {
      id: "58f7150d396630708b00172e:5913ecf7396630c418007032"
    }
  }
  branches {
    responseText: "{{GM}}Exit the Smartframe{{/GM}}"
    nextNodeIndex: 21
    idRef {
      id: "58f7150d396630708b00172e:591a8b03396630bc1f004f58"
    }
  }
  nodeType: ConversationNodeType_Simple
  comment: "Smartframe Loop"
}
nodes {
  idRef {
    id: "5913ef11396630c418007060"
  }
  index: 11
  text: "Eisen, female, human, age 40+ (indeterminate, no birth certificate exists).\n\nHeart was cut out, minimal sign of struggle. Body was cleaned, heart removed, and then dumped in Redmond.\nI didn\'t catch it, more\'s the pity. If i had, I would have realized this was that stupid list and pulled it."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "58f7150d396630708b00172e:591a901c396630bc1f00505f"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "58f7150d396630708b00172e:591a9369396630bc1f005069"
  }
  index: 12
  text: "Aliza Bolden, female, human, age 27. UCAS citizen of record.\n\nCrabbage brought her in at 6:36. I hadn\'t noticed that the names matched the list, but I would once the night was over. I slipped up in front of Crabbage, but I covered that by telling McKlusky that Crabbage said antii-meta things about him behind his back. McKlusky put in for Crabbage\'s transfer to Puyallup, they\'re talking about moving Aguirre up. I can work with that.\n\n"
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "58f7150d396630708b00172e:591a9369396630bc1f00506b"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "591a9024396630bc1f005063"
  }
  index: 13
  text: "Glint, uh-- I mean Williams, Hope. Female, human, age 26 according to corporate records.\n\nI had no idea that Glint had a real name. I thought her name was Glint.\nI... I tried to stop her."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "58f7150d396630708b00172e:591a907e396630bc1f005065"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "5a0138963966304431003b33"
  }
  index: 14
  text: "Watts, Samuel. Corporate Record, verified against UCAS criminal database.\n\nSam was a rough guy. He had a liver transplant about a year ago, per the scarring of his bile ducts. I remember him talking about his \'lucky break,\' but I never got the full story why. Apparently his luck ran out, and then some."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "58f7150d396630708b00172e:5a0138e23966304431003b35"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "5a0138fd3966304431003b75"
  }
  index: 15
  text: "Sings With Wind, Lakota. Went by Lucy. Friend called her \'Blind Lucy.\'\n\nA year ago, she got new eyes, courtesy of Melinda Watts. The runner and Aguirre are looking into the \'trophy\' angle, and I don\'t know how much longer I can keep either one of them off the scent. "
  branches {
    responseText: ""
    nextNodeIndex: 16
    idRef {
      id: "58f7150d396630708b00172e:5a0139ec3966304431003bc9"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "5a0139ec3966304431003bcc"
  }
  index: 16
  text: "If either of them figures out that I had anything to do with the organs, or that there\'s a list which lists all the victims- including many missed by the police and newsnets... I would get a bullet in the brain."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "58f7150d396630708b00172e:5a013a273966304431003bce"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "b_HasEvidence"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "5a0139493966304431003b78"
  }
  index: 17
  text: "Halfsky, Jeremy. Male, age 34, NAN-registered SIN. \n\nLung transplant, one year ago. Lung removal.\n\nConvinced Aguirre that the killing was a copycat. It was butchery, I don\'t know what that freak is doing. I think $+(l.name) is going to track him down soon, and I can\'t wait for that ugly fuck to get his just desserts. "
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "58f7150d396630708b00172e:5a013ef43966304431003c19"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "b_HasEvidence"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "5913ee29396630c418007035"
  }
  index: 18
  text: "Are you sure that you want to do this? These records will not be recoverable."
  branches {
    responseText: "Yes."
    nextNodeIndex: 19
    idRef {
      id: "58f7150d396630708b00172e:5913ee46396630c418007037"
    }
  }
  branches {
    responseText: "No."
    nextNodeIndex: 20
    idRef {
      id: "58f7150d396630708b00172e:5913ee46396630c418007039"
    }
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "5913ee7f396630c41800705d"
  }
  index: 19
  text: "You purge the records completely from the system. That may confuse a certain doctor when he comes back to look at them later."
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "5913ee66396630c418007057"
  }
  index: 20
  text: "Returning to the Smartframe search, you find the remaining notes."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "58f7150d396630708b00172e:5913ee69396630c418007059"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "591a8b35396630bc1f004f5b"
  }
  index: 21
  text: "Thank you, Doctor Dresden.\n\nPlease review our menu options, as our system has changed:\n{{CC}}Personnel{{/CC}}\n{{CC}}Payroll{{/CC}}\n{{CC}}Security{{/CC}}\n{{CC}}Data Backup{{/CC}}\n{{CC}}Donor Privacy{{/CC}}"
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "58f7150d396630708b00172e:591a8b3b396630bc1f004f5d"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
roots {
  nextNodeIndex: 0
  idRef {
    id: "58f7150d396630708b00172e:58f7150d396630708b001732"
  }
}
