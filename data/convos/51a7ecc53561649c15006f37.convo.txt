idRef {
  id: "51a7ecc53561649c15006f37"
}
ui_name: "c22-s1_TelestrianOffice_HarlequinHUB"
nodes {
  idRef {
    id: "51a7ecd63561649c15006f3d"
  }
  index: 0
  text: "Are you ready to get knee-deep in ectoplasm?"
  branches {
    responseText: "I have few questions first."
    nextNodeIndex: 1
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a18"
    }
  }
  branches {
    responseText: "I\342\200\231m ready. Let\342\200\231s go stomp some bugs."
    nextNodeIndex: 13
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a51"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "I\342\200\231ll be back."
    nextNodeIndex: -1
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a54"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51a7ed603561649c15006f42"
  }
  index: 1
  text: "Of course you do."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a1b"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e015007070"
  }
  index: 2
  text: ""
  branches {
    responseText: "So, who are you?"
    nextNodeIndex: 3
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51db13b4623331c81b003cc8"
    }
  }
  branches {
    responseText: "How do we kill an insect spirit again?"
    nextNodeIndex: 8
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51cc6bd6623665a418004953"
    }
  }
  branches {
    responseText: "What\342\200\231s the connection between the bugs and the Universal Brotherhood?"
    nextNodeIndex: 10
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51c2394b623331ac0e003f48"
    }
  }
  branches {
    responseText: "Does Hans Brackhaus really work for a Great Dragon?"
    nextNodeIndex: 12
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51c23985623331ac0e003f7d"
    }
  }
  branches {
    responseText: "I\342\200\231m ready. Let\342\200\231s go stomp some bugs."
    nextNodeIndex: 13
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a49"
    }
  }
  branches {
    responseText: "I\342\200\231ll be back."
    nextNodeIndex: -1
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a4f"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e015007073"
  }
  index: 3
  text: "I am he as you are he as you are me and we are all together."
  branches {
    responseText: "Excuse me?"
    nextNodeIndex: 4
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a20"
    }
  }
  branches {
    responseText: "Sounds like a load of drek."
    nextNodeIndex: 6
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51cc6b3b623665a418004950"
    }
  }
  branches {
    responseText: "{{CC}}Intelligence: 5{{/CC}}You\342\200\231re the walrus?"
    conditions {
      ops {
        functionName: "Compare Actor Attribute"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorAttributes"
            }
            args {
              int_value: 4
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 5
        }
      }
    }
    nextNodeIndex: 7
    hideIfUnavailable: true
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a2e"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e015007076"
  }
  index: 4
  text: "{{GM}}He seems disappointed that you didn\342\200\231t get his joke.{{/GM}}\n\nYou are excused."
  branches {
    responseText: ""
    nextNodeIndex: 5
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a23"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e015007079"
  }
  index: 5
  text: "{{GM}}He bows with a flourish.{{/GM}}\n\nI am Har\'lea\'quinn. The Lightbearer. Last Knight of the Crying Spire. He who manipulates shadowrunners and fights duels with assholes. And for the next hour or two, I am at your service."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a26"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e01500707f"
  }
  index: 6
  text: "It is indeed! I am pleased that you are not gullible enough to fall for that line of metaphysical bullshit. \n\n{{GM}}He bows with a flourish.{{/GM}}\n\nI am Har\'lea\'quinn. The Lightbearer. Last Knight of the Crying Spire. He who manipulates shadowrunners and fights duels with assholes. And for the next hour or two, I am at your service."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a2b"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e015007085"
  }
  index: 7
  text: "Goo goo g\'joob! \n\n{{GM}}He bows with a flourish.{{/GM}}\n\nI am Har\'lea\'quinn. The Lightbearer. Last Knight of the Crying Spire. He who manipulates shadowrunners and fights duels with assholes. And for the next hour or two, I am at your service."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a31"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e01500708b"
  }
  index: 8
  text: "Ah, the fun gory stuff! \n\nStep one: Damage the bug using conventional weapons and magic until the spirit is released from the host body. \n\nStep two: Shoot the insect spirit using the Project Aegis launcher that Telestrian\342\200\231s people created. \n\nStep three: Keep shooting until the either the spirit is destroyed or you are bug food."
  branches {
    responseText: ""
    nextNodeIndex: 9
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a36"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e01500708e"
  }
  index: 9
  text: "Rinse, repeat."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a39"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e015007094"
  }
  index: 10
  text: "{{GM}}Harlequin\342\200\231s eyes glitter at the question.{{/GM}}\n\nOh, this one is genius. Genius! Talk about hiding in plain sight! This cycle, the bugs didn\342\200\231t use some whacked-out shaman in a small rural village as their portal."
  branches {
    responseText: ""
    nextNodeIndex: 11
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a3e"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e015007097"
  }
  index: 11
  text: "They\342\200\231re thinking big! They set up shop in every major city, created a major marketing campaign, and then began aggressively recruiting the drop-outs, the disaffected, and the deranged -  just like any good cult! \n\nIf Aegis fails... if we fail, the world will be absolutely overrun by bugs. It\342\200\231s brilliant!"
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a41"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51ba8427623665e01500709d"
  }
  index: 12
  text: "{{GM}}He winks.{{/GM}}\n\nNo."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a46"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51c2194e396163281d000381"
  }
  index: 13
  text: "{{GM}}His eyes light up.{{/GM}}\n\nI thought you\'d never ask! "
  branches {
    responseText: ""
    nextNodeIndex: 14
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a4c"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51c21984396163281d0003b2"
  }
  index: 14
  text: "I suppose you should know... Telestrian\'s technicians only had time to create a few prototype Aegis launchers. I\'ll be taking one, naturally. Another is for you. We can probably cobble a few others together. We won\'t get any replacements, treat them well.\n\nIf you want additional bug-splattering firepower, James has agreed to allow one of his personal elite guard to accompany us with the final prototype weapon.\n\nAnd now, let us away. We have a date with destiny and she doesn\'t like to be kept waiting."
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "hasSaidLetsGo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "Sh 1 Aegis (Insecticide)"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "51e4322b623331001600698b"
  }
  index: 15
  text: "Come on, I\'m getting antsy waiting around here."
  branches {
    responseText: "Okay, let\'s go."
    actions {
      ops {
        functionName: "Open Hiring Screen and Open Scene"
        args {
          call_value {
            functionName: "Get Map Item (Scene)"
            args {
              string_value: "c25-s3_Hive-1"
            }
          }
        }
        args {
          string_value: "Head to the Hive beneath the Universal Brotherhood?"
        }
      }
    }
    nextNodeIndex: -1
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a59"
    }
  }
  branches {
    responseText: "I\'m not quite ready yet."
    nextNodeIndex: -1
    idRef {
      id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a5b"
    }
  }
  nodeType: ConversationNodeType_Simple
}
roots {
  responseText: ""
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "hasSaidLetsGo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  nextNodeIndex: 0
  idRef {
    id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a15"
  }
}
roots {
  responseText: ""
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "hasSaidLetsGo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  nextNodeIndex: 15
  idRef {
    id: "51a7ecc53561649c15006f37:58d5fbfc3966308840005a56"
  }
}
