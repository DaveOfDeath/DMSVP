idRef {
  id: "5842e8f834626534220000d1"
}
ui_name: "c16-s1_LabSpirit_CrystalInspect"
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049da"
  }
  index: 0
  text: "{{GM}}The shaman\'s gaze darts from the crystal to the chamber where Gormenghast writhes in its spectral chains.{{/GM}} Ok, ok fuck. Um. Shit. They\'re using those spirits to channel the binding on to the freespirit. Then they use crystal resonance to shield the spirits from damage. Fuck, damn, shit."
  branches {
    responseText: "River, Focus! What do we need to do?"
    nextNodeIndex: 1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049db"
    }
  }
  branches {
    responseText: "{{CC}}Conjuring 5{{/CC}} So we need to break the resonance."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 7
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 4
        }
      }
    }
    nextNodeIndex: 12
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c004a02"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isRiver"
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bCystalInspected"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049dc"
  }
  index: 1
  text: "{{GM}}River givers her head a quick shake.{{/GM}} Right. Close the vents fueling the resonance. Banish the spirits binding Gormenghast. Then... Um."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049dd"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isRiver"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049de"
  }
  index: 2
  text: ""
  branches {
    responseText: "{{CC}}River{{/CC}} Dolphin got any ideas?"
    nextNodeIndex: 3
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049df"
    }
  }
  branches {
    responseText: "{{CC}}Paco{{/CC}} Got any ideas, kid?"
    conditions {
      ops {
        functionName: "Evaluate Tag for Actor"
        args {
          call_value {
            functionName: "All Actors on Team"
            args {
              call_value {
                functionName: "Get Preset Value (string)"
                args {
                  string_value: "FactionList"
                }
                args {
                  int_value: 0
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
            args {
              call_value {
                functionName: "Get Map Item (SceneDimension)"
                args {
                  string_value: "Default"
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (SenseTagList)"
            args {
              string_value: "isPaco"
            }
          }
        }
      }
    }
    nextNodeIndex: 5
    hideIfUnavailable: true
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049e6"
    }
  }
  branches {
    responseText: "{{CC}}Violet{{/CC}} Got any ideas, kid?"
    conditions {
      ops {
        functionName: "Evaluate Tag for Actor"
        args {
          call_value {
            functionName: "All Actors on Team"
            args {
              call_value {
                functionName: "Get Preset Value (string)"
                args {
                  string_value: "FactionList"
                }
                args {
                  int_value: 0
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
            args {
              call_value {
                functionName: "Get Map Item (SceneDimension)"
                args {
                  string_value: "Default"
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (SenseTagList)"
            args {
              string_value: "isViolet"
            }
          }
        }
      }
    }
    nextNodeIndex: 6
    hideIfUnavailable: true
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049ea"
    }
  }
  branches {
    responseText: "{{CC}}Seamus{{/CC}} Any ideas, spell-slinger?"
    conditions {
      ops {
        functionName: "Evaluate Tag for Actor"
        args {
          call_value {
            functionName: "All Actors on Team"
            args {
              call_value {
                functionName: "Get Preset Value (string)"
                args {
                  string_value: "FactionList"
                }
                args {
                  int_value: 0
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
            args {
              call_value {
                functionName: "Get Map Item (SceneDimension)"
                args {
                  string_value: "Default"
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (SenseTagList)"
            args {
              string_value: "isSeamus"
            }
          }
        }
      }
    }
    nextNodeIndex: 7
    hideIfUnavailable: true
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049ee"
    }
  }
  branches {
    responseText: "{{CC}}Bartlett{{/CC}} Any ideas, adept?"
    conditions {
      ops {
        functionName: "Evaluate Tag for Actor"
        args {
          call_value {
            functionName: "All Actors on Team"
            args {
              call_value {
                functionName: "Get Preset Value (string)"
                args {
                  string_value: "FactionList"
                }
                args {
                  int_value: 0
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
            args {
              call_value {
                functionName: "Get Map Item (SceneDimension)"
                args {
                  string_value: "Default"
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (SenseTagList)"
            args {
              string_value: "isBartlett"
            }
          }
        }
      }
    }
    nextNodeIndex: 9
    hideIfUnavailable: true
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049f5"
    }
  }
  branches {
    responseText: "{{CC}}Coyote{{/CC}} Throw me a bone, Coyote."
    conditions {
      ops {
        functionName: "Evaluate Tag for Actor"
        args {
          call_value {
            functionName: "All Actors on Team"
            args {
              call_value {
                functionName: "Get Preset Value (string)"
                args {
                  string_value: "FactionList"
                }
                args {
                  int_value: 0
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
            args {
              call_value {
                functionName: "Get Map Item (SceneDimension)"
                args {
                  string_value: "Default"
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (SenseTagList)"
            args {
              string_value: "isCoyote"
            }
          }
        }
      }
    }
    nextNodeIndex: 10
    hideIfUnavailable: true
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049f9"
    }
  }
  branches {
    responseText: "Give me some cover. Let\'s do this."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 7
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 4
        }
      }
    }
    nextNodeIndex: -1
    hideIfUnavailable: true
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049fd"
    }
  }
  branches {
    responseText: "{{CC}}Decker{{/CC}} There\'s got to be some kind of Matrix control around here."
    conditions {
      ops {
        functionName: "Evaluate If Actor Is Decker"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Get Map Item (Player)"
                args {
                  int_value: 0
                }
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 11
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049fe"
    }
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Disable the Resonators"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  comment: "Crew Crystal Loop"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049e0"
  }
  index: 3
  text: "{{GM}}Features tight, the shaman closes her eyes for a moment and then gasps.{{/GM}} Oh, shit. They\'re- the- we\'re- The astral here... is poisonous. They\'re twisting it. {{GM}}She clenches her jaw.{{/GM}} I can channel the power out of the resonators and shut them down, but it will take some time."
  branches {
    responseText: "Not exactly a plan, River."
    nextNodeIndex: 4
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049e1"
    }
  }
  branches {
    responseText: "Get started. We\'ll cover you."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049e5"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isRiver"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049e2"
  }
  index: 4
  text: "{{GM}}She fixes you with a pained stare.{{/GM}} I know, I know. But this has to be stopped!"
  branches {
    responseText: "Get started. We\'ll cover you."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049e3"
    }
  }
  branches {
    responseText: "This is why I don\'t do charity."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049e4"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049e7"
  }
  index: 5
  text: "Who me? {{GM}}Paco glances around.{{/GM}} Oh, well. Looks like they\'re using an interface similar to a drone servo to control the vent opening. If you give me some time, I could probably rewire the vent and shut it down. Would that work?"
  branches {
    responseText: "Give it a shot. We\'ll cover you."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049e8"
    }
  }
  branches {
    responseText: "We need to figure this out, and fast."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049e9"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isPaco"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049eb"
  }
  index: 6
  text: "{{GM}}Violet looks startled at the question, then nods.{{/GM}} Yeah, um, there\'s got to be a Matrix control system for the resonance systems. Too complex to do it all manually. Find me a jack point and I\'ll shut \'em down."
  branches {
    responseText: "Sound almost like a plan. Let\'s do this."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049ec"
    }
  }
  branches {
    responseText: "Maybe there\'ll be some data in there to make this payoff, too."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049ed"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isViolet"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049ef"
  }
  index: 7
  text: "This bulldrek is exactly the kind of nonsense the eggheads I used to work with would dream up. {{GM}}He waves his hands around vaguely.{{/GM}} This crap doesn\'t even look like magic, it looks like a machine trying to mimic magic. {{GM}}His eyes widen with sudden inspiration.{{/GM}} I bet that\'s exactly what it is! Like mirrors reflecting a laser! They\'re just refocusing the mana lines into the binding circle."
  branches {
    responseText: "And I thought you didn\'t have a ThD?"
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049f0"
    }
  }
  branches {
    responseText: "So how do we stop it."
    nextNodeIndex: 8
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049f1"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isSeamus"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049f2"
  }
  index: 8
  text: "Yeah, right? {{GM}}He taps his nose.{{/GM}} So, I can probably redirect the mana into myself... Not exactly fun, but if I do that for long enough, it should stop the resonance. Assuming it doesn\'t cook me from the inside out."
  branches {
    responseText: "And if it does, we have crispy dwarf for dinner. Win-win."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049f3"
    }
  }
  branches {
    responseText: "Do you\'re best, Seamus."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049f4"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isSeamus"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049f6"
  }
  index: 9
  text: "{{GM}}Jon hefts his weapon focus.{{/GM}} Sure. I can take Fate here and sever the mana line feeding the crystal. Might take me a second or two, but it can be done."
  branches {
    responseText: "Get on it, Bartlett. We\'ll cover you."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049f7"
    }
  }
  branches {
    responseText: "Glad to know Fate\'s on our side."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049f8"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isBartlett"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049fa"
  }
  index: 10
  text: "{{GM}}Coyote looks surprised at your question and stands mouth agape for moment. Then she closes it and swallows, glancing at the fire coming from the vent.{{/GM}} Alright, that fire looks like a Flaming Moxie. It\'s a drink we make at the bar. Alchemical stuff. There\'s a cocktail we mix up to pour over the fire and put it out. Gunpowder and whiskey... Give me some time and I might be able to extinguish the fire?"
  branches {
    responseText: "You carry whiskey around? Never mind. Do it."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049fb"
    }
  }
  branches {
    responseText: "I could use a Flaming Moxie about now."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c0049fc"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isCoyote"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049ff"
  }
  index: 11
  text: "{{GM}}River nods dubiously.{{/GM}} Maybe. It does seem like a pretty complex system. There might be some data in the system to explain just what the hell they\'re doing."
  branches {
    responseText: "I\'ll find a jack point. Cover me."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c004a00"
    }
  }
  branches {
    responseText: "Great. Maybe we can find a way to make this job pay after all."
    nextNodeIndex: -1
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c004a01"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isRiver"
}
nodes {
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c004a03"
  }
  index: 12
  text: "The fire under those crystals is generated by expending fetishes. I can suck out the magical energies of the fetishes and snuff the fire. Should break the resonance. It\'ll take a bit of time..."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "5842e8f834626534220000d1:5844e228346265b80c004a04"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "5825157f3462653002001d28"
  }
}
roots {
  responseText: ""
  nextNodeIndex: 0
  idRef {
    id: "5842e8f834626534220000d1:5844e228346265b80c0049d9"
  }
}
