idRef {
  id: "13e85b57623331c415004843"
}
ui_name: "c11-s2_Matrix_NewsNet"
nodes {
  idRef {
    id: "13e892cd623331c415004849"
  }
  index: 0
  text: "//NewsNet// (1) return on subject: Silas Forsberg \nThe body of Silas Forsberg, a Chop Shop surgical assistant, was found in an apartment in Snohomish earlier this week. \n\nThe body had been estimated to be decomposing for as long as a month when Forsberg\'s landlord noticed the rancid smell and contacted authorities. Lone Star representatives have issued a statement saying Forsberg\'s death has been ruled a suicide. According to reports, his body a mass of puncture wounds and the cause of death was determined to be an overdose of anti-stress medications and sedatives. "
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "13e85b57623331c415004843:59682f83346265ac270038e6"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "13ea326b623331c41500484c"
  }
  index: 1
  text: "The man\'s employer claims he was a dedicated employee, though he suffered from bouts of depression. \n\nNo next of kin for the victim could be located, but the attorney appointed to his estate has located a will written weeks prior, leaving all of his belongings to his psychiatrist. \n\nThe identity of the psychiatrist has not been released due to privacy concerns. \nYet another sad end to a life, as is far too common here in the Sprawl. "
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "13e85b57623331c415004843:59682f93346265ac270038ea"
    }
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "NewsnetFilesRead"
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
}
nodes {
  idRef {
    id: "59682f95346265ac270038ed"
  }
  index: 2
  text: "Now that might be something we can go on. Let\'s regroup in meat space for a bit."
  branches {
    responseText: "{{CC}}Bartlett{{/CC}} I\'d still like to find that NOC list for Bartlett."
    conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "57084f7c6631365c1600767e"
            }
            args {
              string_value: "Crew_Loyalty_Jon"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    nextNodeIndex: -1
    hideIfUnavailable: true
    idRef {
      id: "13e85b57623331c415004843:59682fa1346265ac270038ef"
    }
  }
  branches {
    responseText: "Go ahead and jack out, Violet."
    conditions {
      ops {
        functionName: "Actor is Jacked in"
        args {
          call_value {
            functionName: "Get Map Item (Actor)"
            args {
              string_value: "5961b21f3462655813003e9f"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 3
    hideIfUnavailable: true
    idRef {
      id: "13e85b57623331c415004843:59682fff346265ac270038f1"
    }
  }
  branches {
    responseText: "I\'ll be there in a just a second."
    conditions {
      ops {
        functionName: "Actor is Jacked in"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: -1
    hideIfUnavailable: true
    idRef {
      id: "13e85b57623331c415004843:59683030346265ac270038f3"
    }
  }
  branches {
    responseText: "Sounds like a plan."
    conditions {
      ops {
        functionName: "Actor is Jacked in"
        args {
          call_value {
            functionName: "Get Map Item (Actor)"
            args {
              string_value: "fafbad9c623331341400482c"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: -1
    hideIfUnavailable: true
    idRef {
      id: "13e85b57623331c415004843:596830d4346265ac270038f5"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "fafbad9c623331341400482c"
  }
}
nodes {
  idRef {
    id: "59683147346265ac270038f8"
  }
  index: 3
  text: "But... But we\'ve barely even scratched the surface of this system. I didn\'t even leave any graffiti on anything yet."
  branches {
    responseText: "Focus on getting paid, kid."
    nextNodeIndex: -1
    idRef {
      id: "13e85b57623331c415004843:596831bb346265ac270038fa"
    }
  }
  branches {
    responseText: "Go ahead and poke around if you want."
    nextNodeIndex: -1
    idRef {
      id: "13e85b57623331c415004843:59683220346265ac270038fe"
    }
  }
  branches {
    responseText: "They\'ll be time for fun later."
    nextNodeIndex: -1
    idRef {
      id: "13e85b57623331c415004843:596831bd346265ac270038fc"
    }
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "5961b21f3462655813003e9f"
  }
}
roots {
  responseText: ""
  nextNodeIndex: 0
  idRef {
    id: "13e85b57623331c415004843:59682f83346265ac270038e3"
  }
}
