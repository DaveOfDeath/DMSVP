idRef {
  id: "51be3e8b623331200e003f92"
}
ui_name: "c15-s1_Seamstress_Baron"
nodes {
  idRef {
    id: "51be3f64623331200e003f98"
  }
  index: 0
  text: "Bonsoir, mon ami! I am pleased that we can have a semi-private conversation. You must be careful with tour guides like your friend Johnny, though. You cannot trust everyone you meet in the Matrix."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dbe"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be3f93623331200e003f9e"
  }
  index: 1
  text: ""
  branches {
    responseText: "Everyone on Shadowlands knows you\342\200\231re looking for me. Why the spam?"
    nextNodeIndex: 2
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dc1"
    }
  }
  branches {
    responseText: "So what do you want?"
    nextNodeIndex: 2
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e24"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Pleasure to meet you, Baron. You seem very intent on talking to me."
    nextNodeIndex: 2
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e27"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be3fb3623331200e003fa3"
  }
  index: 2
  text: "Samedi wishes to thank you for saving Marie-Louise from the Universal Brotherhood. The girl is quite... precious. If harm were to come to her, he does not know what he would do."
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dc4"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be3fbc623331200e003fa6"
  }
  index: 3
  text: "He also offers you his help. The insects you encountered, they are something, no? Something dark. To ignore them would be folly. There is much at stake.\n\nSamedi knows you are after this woman, Jessica Watts, for your own reasons. He can help you get to this woman, *and* defeat her bugs."
  branches {
    responseText: "And why should I trust you?"
    nextNodeIndex: 4
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dc7"
    }
  }
  branches {
    responseText: "I think I\342\200\231m getting into a lot more than I bargained for..."
    nextNodeIndex: 5
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dcd"
    }
  }
  branches {
    responseText: "And hypothetically, how would we do that?"
    nextNodeIndex: 6
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dd3"
    }
  }
}
nodes {
  idRef {
    id: "51be3fe9623331200e003fb5"
  }
  index: 4
  text: "Because our goals are aligned."
  branches {
    responseText: ""
    nextNodeIndex: 6
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dca"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be3ff0623331200e003fb7"
  }
  index: 5
  text: "Now, now. Listen. Hear Samedi. "
  branches {
    responseText: ""
    nextNodeIndex: 6
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dd0"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be3ff2623331200e003fb9"
  }
  index: 6
  text: "The job will not be simple, nor will it be straightforward, but Samedi can guarantee it will be dangerous! \n\nTelestrian Industries has been working for two years on a formula - codenamed AEGIS. They are working with another corporation - a foreign corporation - to refine it. This is their third attempt to get it right and they believe they have. Manufacturing began several months ago."
  branches {
    responseText: ""
    nextNodeIndex: 7
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dd6"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be401f623331200e003fc2"
  }
  index: 7
  text: "Unfortunately, their manufacturing plant in the Columbia Valley was recently... blown up. It could have been corporate espionage or it could have been something else. This is unknown. What is known is that a large sample of the formula survived."
  branches {
    responseText: "What does this have to do with Jessica and the Universal Brotherhood?"
    nextNodeIndex: 8
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dd9"
    }
  }
  branches {
    responseText: "Sounds like something that might be worth a lot of nuyen."
    nextNodeIndex: 22
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e1e"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be4038623331200e003fc6"
  }
  index: 8
  text: "We want AEGIS because it kills bugs. Big ones. Like the ones you met at the Universal Brotherhood. If you want to go back there and bring the Watts woman to justice, you\342\200\231ll need AEGIS."
  branches {
    responseText: ""
    nextNodeIndex: 9
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004ddc"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be4051623331200e003fcb"
  }
  index: 9
  text: "And, as it happens... Samedi knows where the last sample of AEGIS is being kept. \n\nHence, the job at hand! We are going to break into the Telestrian Industries primary operations office complex here in Seattle. AEGIS will be somewhere within that building. We will find the sample, and liberate it for ourselves."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004ddf"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be40e4623331200e003fea"
  }
  index: 10
  text: ""
  branches {
    responseText: "You want me to break into one of the most influential corps in the Pacific Northwest? You\'ve got to be joking."
    nextNodeIndex: 11
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51c0ca66623665741f003f0c"
    }
  }
  branches {
    responseText: "Why not just let Telestrian take care of it? Sounds like they\342\200\231re already halfway there."
    nextNodeIndex: 13
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51be4101623331200e003ffa"
    }
  }
  branches {
    responseText: "Why not just tell Lone Star and let them take care of the Brotherhood?"
    nextNodeIndex: 15
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51c0cbdb623665741f003f0d"
    }
  }
  branches {
    responseText: "And how do you know all of this about Aegis?"
    nextNodeIndex: 17
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51c0ce65623665741f003fc0"
    }
  }
  branches {
    responseText: "I want to know more about you first. Who you really are."
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 19
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51c0ceda623665741f003fc1"
    }
  }
  branches {
    responseText: "You never explained how you and Marie-Louise know each other."
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 20
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "51c0d15d623665741f003fc2"
    }
  }
  branches {
    responseText: "I\'m done asking questions."
    actions {
      ops {
        functionName: "Set Variable (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasSaidNoMoreQuestions"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 21
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e18"
    }
  }
  nodeType: ConversationNodeType_Simple
  comment: "Baron Loop"
}
nodes {
  idRef {
    id: "51be40e4623331200e003fed"
  }
  index: 11
  text: "Would that I were but it is the only way. It is the only place to get what we need.\n\nBut take heart! You will have Samedi with you! And he is clever in the ways of the Matrix. We cannot lose."
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 0
            }
          }
        }
      }
    }
    actions {
      ops {
        functionName: "Set Variable (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 12
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004de4"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 10
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dea"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be61a6623331640d0071f1"
  }
  index: 12
  text: "So. Will you do this thing? Will you ally with Baron Samedi?"
  branches {
    responseText: ""
    nextNodeIndex: 26
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004de7"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be40e4623331200e003ff0"
  }
  index: 13
  text: "Telestrian! Do not talk to me of Telestrian. He is an executive. A businessman. \n\nDo you know what his reaction was when he learned of the insect threat? He called a meeting! He and his associates will be debating action forever."
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 0
            }
          }
        }
      }
    }
    actions {
      ops {
        functionName: "Set Variable (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 14
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004def"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 10
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004df5"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be63a9623331640d0073a8"
  }
  index: 14
  text: "So. Will you do this thing? Will you ally with Baron Samedi?"
  branches {
    responseText: ""
    nextNodeIndex: 26
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004df2"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be40e4623331200e003ff3"
  }
  index: 15
  text: "The Universal Brotherhood has connections - high level connections in the government and in Lone Star. And their message resonates with those who need something to believe in. \n\nWe have no proof and we have no time. We must act.\n\n"
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 0
            }
          }
        }
      }
    }
    actions {
      ops {
        functionName: "Set Variable (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 16
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dfa"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 10
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e00"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be63ac623331640d0073ac"
  }
  index: 16
  text: "So. Will you do this thing? Will you ally with Baron Samedi?"
  branches {
    responseText: ""
    nextNodeIndex: 26
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004dfd"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be40e4623331200e003ff6"
  }
  index: 17
  text: "Because Samedi has personal connections into James Telestrian\342\200\231s affairs. You see? He knows!"
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 0
            }
          }
        }
      }
    }
    actions {
      ops {
        functionName: "Set Variable (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 18
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e05"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 10
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e0b"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be63ae623331640d0073b0"
  }
  index: 18
  text: "So. Will you do this thing? Will you ally with Baron Samedi?"
  branches {
    responseText: ""
    nextNodeIndex: 26
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e08"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be410f623331200e004000"
  }
  index: 19
  text: "What is there to know? Baron Samedi is gifted. You see? He was born to walk... he was born to travel the Matrix, bending it to his will. \n\nWho is Baron Samedi \"really\"? What is the difference? When a clown removes his paint, he is still a clown but in disguise, no? \n\nIt is only when he is painted that people applaud."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e10"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be4115623331200e004003"
  }
  index: 20
  text: "Oui, that is true. And it is for her to say, not Samedi. He has nothing to lose, while she...\n\nYou must ask her."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e15"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be5268623331640d006f0b"
  }
  index: 21
  text: "And you are convinced?"
  branches {
    responseText: ""
    nextNodeIndex: 26
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e1b"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be4042623331200e003fc8"
  }
  index: 22
  text: "Oh it is worth a great deal, mon ami. A great deal. \n\nYou see... it kills bugs. Big ones. Like the ones you met at the Universal Brotherhood. If you want to go back there and bring the Watts woman to justice, you\342\200\231ll need Aegis."
  branches {
    responseText: ""
    nextNodeIndex: 9
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e21"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be3f86623331200e003f9b"
  }
  index: 23
  text: "Bonsoir, mon ami! Samedi is pleased that we can have a private conversation."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e2d"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be5198623331640d006ea9"
  }
  index: 24
  text: ""
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 0
            }
          }
        }
      }
    }
    actions {
      ops {
        functionName: "Set Variable (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 25
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e33"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasAskedBaronSomething"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: -1
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004eba"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be51e6623331640d006ed2"
  }
  index: 25
  text: "So. Will you do this thing? Will you ally with Baron Samedi?"
  branches {
    responseText: ""
    nextNodeIndex: 26
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e36"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be51ff623331640d006ed5"
  }
  index: 26
  text: ""
  branches {
    responseText: "I have more questions first."
    conditions {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "hasSaidNoMoreQuestions"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 0
            }
          }
        }
      }
    }
    nextNodeIndex: 27
    hideIfUnavailable: true
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e39"
    }
  }
  branches {
    responseText: "I\342\200\231m in. Jessica will pay for what she\342\200\231s done."
    nextNodeIndex: 28
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e3f"
    }
  }
  branches {
    responseText: "I\342\200\231ve got a job to do. If this is a means to that end, I\342\200\231ll do it."
    nextNodeIndex: 35
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e5d"
    }
  }
  branches {
    responseText: "Well... I\342\200\231ve got nowhere else to go. Might as well see how deep this cesspool gets."
    nextNodeIndex: 36
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e63"
    }
  }
  branches {
    responseText: "Alright, I\342\200\231m in. If these bugs are as dangerous as you say, someone\342\200\231s got to save the world. Guess it might as well be me."
    nextNodeIndex: 37
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e69"
    }
  }
  branches {
    responseText: "Sorry Baron. Helping a friend is one thing. This isn\'t what I signed up for."
    nextNodeIndex: 38
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e6f"
    }
  }
  branches {
    responseText: "Do I look like a charity to you? This is a job. And I get PAID for taking jobs."
    nextNodeIndex: 38
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004eb7"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  comment: "Questions"
}
nodes {
  idRef {
    id: "51be521e623331640d006f05"
  }
  index: 27
  text: "The Baron understands the need for information all too well. Ask what you will; I will answer what I can."
  branches {
    responseText: ""
    nextNodeIndex: 10
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e3c"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be529c623331640d006f1b"
  }
  index: 28
  text: "Ah yes. Revenge is a very motivating thing. This is something Samedi knows about. Yes, he does."
  branches {
    responseText: ""
    nextNodeIndex: 29
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e42"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be67c9623331640d0074b1"
  }
  index: 29
  text: "Excellent! Funds are transferring to your account now to help you assemble your team. Telestrian keeps Project Aegis information on a private local network - it cannot be accessed from the outside through the Matrix. You must jack into it from within the office complex itself."
  branches {
    responseText: ""
    nextNodeIndex: 30
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e45"
    }
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Add Nuyen"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "valBaronPayment"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "51be68ad623331640d00750c"
  }
  index: 30
  text: ""
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    nextNodeIndex: 31
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e48"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          int_value: 3
        }
      }
    }
    nextNodeIndex: 32
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e4e"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 3
        }
      }
    }
    nextNodeIndex: 33
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e54"
    }
  }
  nodeType: ConversationNodeType_Simple
  comment: "Decker"
}
nodes {
  idRef {
    id: "51be68ad623331640d00750f"
  }
  index: 31
  text: "Therefore, you must bring a decker with you. This is vital."
  branches {
    responseText: "What about you? You\342\200\231re not coming with?"
    nextNodeIndex: 33
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e4b"
    }
    auxiliaryLink: true
  }
}
nodes {
  idRef {
    id: "51be68ad623331640d007515"
  }
  index: 32
  text: "Samedi must suggest you bring a more experienced decker with you - in case your skills are not up to the challenge. Forgive the Baron. He means no disrespect. But this mission - it must succeed."
  branches {
    responseText: "What about you? You\342\200\231re not coming with?"
    nextNodeIndex: 33
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e51"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be68ad623331640d00751b"
  }
  index: 33
  text: "Samedi will be part of this evening\342\200\231s events, but must remain remote. He will keep all of Seattle law enforcement and off-duty Telestrian Security away, while you locate the information we need from inside."
  branches {
    responseText: "And how do I get inside?"
    nextNodeIndex: 34
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e57"
    }
  }
  branches {
    responseText: "And what about the on-duty Telestrian Security? The ones that will shoot me as soon as I step into the lobby?"
    nextNodeIndex: 34
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e5a"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be68ad623331640d00751e"
  }
  index: 34
  text: "Ah! The Baron will handle that as well. Telestrian guards will be rerouted throughout the building. With the right timing, no one will even know you\342\200\231re there.\n\nBut of course, even Baron Samedi cannot anticipate all possibilities. So tonight, you must use your contacts to hire a team, and travel to the Telestrian office complex downtown. \n\nYou will be contacted again when you have gained entrance."
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "hasCompletedBaronConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "51be529f623331640d006f1d"
  }
  index: 35
  text: "Ah yes, you have a code you follow. It is \"all about the job\", eh? There is nobility in this."
  branches {
    responseText: ""
    nextNodeIndex: 29
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e60"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be52a1623331640d006f1f"
  }
  index: 36
  text: "Very existential. Yes, nothing matters, why not die in hail of bullets, eh? You will be a fun partner tonight, mon ami!"
  branches {
    responseText: ""
    nextNodeIndex: 29
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e66"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be52a3623331640d006f21"
  }
  index: 37
  text: "Ah! Bon! Baron Samedi applauds you. We do this job for the *right* reason, eh?"
  branches {
    responseText: ""
    nextNodeIndex: 29
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e6c"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be52ee623331640d006f25"
  }
  index: 38
  text: "There are giant insects nesting beneath Seattle. They cannot be killed. Do you know what insects do? Better than anything? They multiply. \n\nAnd they consume."
  branches {
    responseText: ""
    nextNodeIndex: 39
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e72"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be5303623331640d006f2b"
  }
  index: 39
  text: "But... if that does not sway you, then perhaps you must be spoken to in a different language. Samedi is a technomancer - he turns thought into reality. Complete this operation and he will transfer fifty thousand nuyen into the account of your choosing. \n\nYou are a mercenary and mercenaries get paid. Yes? Now will you do it?"
  branches {
    responseText: "Fifty thousand nuyen? That\342\200\231s a language I understand. You\342\200\231ve got yourself a runner."
    nextNodeIndex: 40
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e75"
    }
  }
  branches {
    responseText: "Make it an even hundred."
    nextNodeIndex: 46
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e90"
    }
  }
  branches {
    responseText: "Well... why the hell not. I\342\200\231ve got nowhere else to go. Might as well see how deep this cesspool gets."
    nextNodeIndex: 47
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e96"
    }
  }
  branches {
    responseText: "Alright, I\342\200\231m in. If these bugs are as dangerous as you say, someone\342\200\231s got to save the world. Guess it might as well be me."
    nextNodeIndex: 48
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e9c"
    }
  }
  branches {
    responseText: "Sorry Baron. Still not sold."
    nextNodeIndex: 49
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004ea2"
    }
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "hasBaronOfferedPayment"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "51be5355623331640d006f30"
  }
  index: 40
  text: "You have the heart of a true mercenary. There is a purity in that, I suppose."
  branches {
    responseText: ""
    nextNodeIndex: 41
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e78"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be6832623331640d0074db"
  }
  index: 41
  text: "Excellent! So glad you have seen reason. The Baron is transferring a portion of your fee to your account now to help you assemble your team. The rest will be payable upon the successful retrieval of the sample. Telestrian keeps Project Aegis information on a private local network - it cannot be accessed from the outside through the Matrix. You must jack into it from within the office complex."
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    nextNodeIndex: 42
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e7b"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          int_value: 3
        }
      }
    }
    nextNodeIndex: 43
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e81"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 3
        }
      }
    }
    nextNodeIndex: 44
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e87"
    }
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Add Nuyen"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "valBaronPayment"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "51be693a623331640d00765c"
  }
  index: 42
  text: "Therefore, you must bring a decker with you. This is vital."
  branches {
    responseText: "What about you? You\342\200\231re not coming with?"
    nextNodeIndex: 44
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e7e"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be6944623331640d007664"
  }
  index: 43
  text: "Samedi must suggest you bring a more experienced decker with you - in case your skills are not up to the challenge. Forgive the Baron. He means no disrespect. But this mission - it must succeed."
  branches {
    responseText: "What about you? You\342\200\231re not coming with?"
    nextNodeIndex: 44
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e84"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be6950623331640d00766f"
  }
  index: 44
  text: "Samedi will be part of this evening\342\200\231s events, but must remain remote. He will keep all of Seattle law enforcement and off-duty Telestrian Security away, while you locate the information we need from inside."
  branches {
    responseText: "And how do I get inside?"
    nextNodeIndex: 45
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e8a"
    }
  }
  branches {
    responseText: "And what about the on-duty Telestrian Security? The ones that will shoot me as soon as I step past the lobby."
    nextNodeIndex: 45
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e8d"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be6950623331640d007672"
  }
  index: 45
  text: "Ah! The Baron will handle that as well. Telestrian guards will be rerouted throughout the building. With the right timing, no one will even know you\342\200\231re there.\n\nBut of course, even Baron Samedi cannot anticipate all possibilities. So tonight, you must use your contacts to hire a team, and travel to the Telestrian office complex downtown. \n\nYou will be contacted again when you have gained entrance."
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "hasCompletedBaronConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "51be538b623331640d006f34"
  }
  index: 46
  text: "Sacre bleu! Fine. Seventy-five. Done."
  branches {
    responseText: ""
    nextNodeIndex: 41
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e93"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be5393623331640d006f36"
  }
  index: 47
  text: "Very existential. Yes, nothing matters, why not die in hail of bullets, eh? You will be a fun partner tonight, mon ami!"
  branches {
    responseText: ""
    nextNodeIndex: 41
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e99"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be539d623331640d006f38"
  }
  index: 48
  text: "Ah! Bon! Baron Samedi applauds you. We do this job for the *right* reason, eh?"
  branches {
    responseText: ""
    nextNodeIndex: 41
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004e9f"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be53a3623331640d006f3a"
  }
  index: 49
  text: "Pardon? You are not \342\200\234sold\342\200\235? We speak of giant bugs, we speak of excessive payment, and still you are not SOLD? \n\nVery well. Consider this. You have hacked the Lone Star police database. You have left a trail of bodies throughout this city. Do not ask how Samedi knows. He knows. He is a technomancer."
  branches {
    responseText: ""
    nextNodeIndex: 50
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004ea5"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be53c5623331640d006f3d"
  }
  index: 50
  text: "You may have been justified. You may have been provoked. It does not matter. What does matter is that you are hot right now. And you can get hotter. Samedi can turn up the heat as high as it will go."
  branches {
    responseText: ""
    nextNodeIndex: 51
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004ea8"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "51be53ce623331640d006f40"
  }
  index: 51
  text: "You will do this thing. You will do the *right* thing. You may do it because it\342\200\231s right. You may do it because it pays. You may do it to save your worthless ass. \n\nBut you will do it."
  branches {
    responseText: ""
    nextNodeIndex: 52
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004eab"
    }
  }
}
nodes {
  idRef {
    id: "51be53d6623331640d006f43"
  }
  index: 52
  text: "{{GM}}Johnny whispers to you.{{/GM}}\n\nHe\342\200\231s not bluffing. This guy has the right connections."
  branches {
    responseText: "When you put it that way - I\342\200\231ll do it."
    nextNodeIndex: 41
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004eae"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Fine. I\342\200\231ll take your money."
    nextNodeIndex: 41
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004eb1"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Okay, Samedi, you\342\200\231ve got me. But don\342\200\231t think I\342\200\231ll forget this."
    nextNodeIndex: 41
    idRef {
      id: "51be3e8b623331200e003f92:58d2139c3966307049004eb4"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceInSceneRef {
    id: "8f322d3630303128160026ed"
  }
}
roots {
  responseText: ""
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "shouldJohnnyJackIn"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  nextNodeIndex: 0
  idRef {
    id: "51be3e8b623331200e003f92:58d2139c3966307049004dbb"
  }
}
roots {
  responseText: ""
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "shouldJohnnyJackIn"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  nextNodeIndex: 23
  idRef {
    id: "51be3e8b623331200e003f92:58d2139c3966307049004e2a"
  }
}
roots {
  responseText: ""
  nextNodeIndex: 24
  idRef {
    id: "51be3e8b623331200e003f92:58d2139c3966307049004e30"
  }
}
