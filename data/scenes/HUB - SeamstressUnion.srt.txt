triggers {
  name: "<!-- Scene Setup RND -->"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "58372f96663136341600603d"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "First.Visit"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "bHub_FirstVisit"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDNextPatron"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "SamOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "bHub_FirstVisit"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "58f70655396630708b001271"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "58f7063b396630708b001270"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "58f709c8396630708b001288"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5904e06c39663034100050be"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "40703c88306434d028005bce"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "590983dc396630301b004394"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 7
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5904a7a239663034100050b7"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5904a45f39663034100050ad"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 7
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5904a7a239663034100050b3"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5904a47739663034100050ae"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5904a7a239663034100050b4"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "590985e1396630301b004397"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5904a7a239663034100050b8"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5713e9ff663136c010001cc1"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5904a7a239663034100050b5"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5713e9f0663136c010001cc0"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "58f701b6396630708b00126e"
  }
  elseActions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "SamOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRandomPlace"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 6
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "5837b26f663136341e006b8c"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "58374173663136341600604c"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "58373287663136341600604a"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "58372fe7663136341600603f"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590987af396630301b004398"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "58372fa7663136341600603e"
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "58db3cfd396630ec8000510b"
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDNextPatron"
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDRunnerPlacement"
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "58db3cfd396630ec8000510b"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "58f70655396630708b001271"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "403d28ba306434d028005879"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "58f7063b396630708b001270"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_TalkedTo_Bartlett"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_TalkedTo_Coyote"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_TalkedTo_Paco"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_TalkedTo_River"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_TalkedTo_Seamus"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_TalkedTo_Violet"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDNextPatron"
          }
        }
      }
    }
  }
  is_oneshot: true
}
triggers {
  name: "RND.SetupPatrons"
  events {
    ops {
      functionName: "On Map Setup"
    }
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eRNDNextPatron"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iPatron"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        int_value: 8
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 2
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDPatronPlacement"
          }
        }
      }
      args {
        float_value: 0.1
      }
    }
  }
  isActive: false
  idRef {
    id: "58372fe7663136341600603f"
  }
  elseActions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 2
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "58372fa7663136341600603e"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "RND.PatronPlacement"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eRNDPatronPlacement"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iPatron"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                call_value {
                  functionName: "Append (string)"
                  args {
                    call_value {
                      functionName: "Convert (int) to (string)"
                      args {
                        call_value {
                          functionName: "Get Variable (int)"
                          args {
                            string_value: "iPatron"
                          }
                        }
                      }
                    }
                  }
                  args {
                    string_value: "isPatron"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Nearest Tagged Prop to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    call_value {
                      functionName: "Append (string)"
                      args {
                        call_value {
                          functionName: "Convert (int) to (string)"
                          args {
                            call_value {
                              functionName: "Get Variable (int)"
                              args {
                                string_value: "iPatron"
                              }
                            }
                          }
                        }
                      }
                      args {
                        string_value: "SPAWN"
                      }
                    }
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Actor)"
                  args {
                    string_value: "5837254a66313660110028f8"
                  }
                }
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDNextPatron"
          }
        }
      }
      args {
        float_value: 0.1
      }
    }
  }
  isActive: false
  idRef {
    id: "58373287663136341600604a"
  }
  elseActions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iPatron"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDNextPatron"
          }
        }
      }
      args {
        float_value: 0.1
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "RND.StoolDweller/Stage"
  events {
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Delete Props by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isStageLight"
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isBarStoolMan"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDIdleAnimations"
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "58372fa7663136341600603e"
  }
  elseActions {
    ops {
      functionName: "Delete Props by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isPianoNight"
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSeatedLady"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDIdleAnimations"
          }
        }
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "RND.IdleAnimations"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eRNDIdleAnimations"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "54b62398306434c4120044e4"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_idle_bouncer"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "58d6f473396630741b00440f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/sitting_idle3_elfOrk"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "58d9f99a3966303c950039b9"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/sitting_idle3_elfOrk"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron1"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5837254a66313660110028f8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_idle_smoking"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron2"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5837254a66313660110028f8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_idle_shuffledance"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron3"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5837254a66313660110028f8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_idle_lookaround"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron4"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5837254a66313660110028f8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/sitting_idle_eating"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron5"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5837254a66313660110028f8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_idle_clamoring"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron6"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5837254a66313660110028f8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_idle_dancing"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron7"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5837254a66313660110028f8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_idle_shifting"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron8"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5837254a66313660110028f8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_idle_scratch"
          }
        }
      }
    }
    ops {
      functionName: "Set Actor In Passive Mode"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "40726fab306434d028005bd0"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Order Actor to Patrol"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "40726fab306434d028005bd0"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (PatrolRoute)"
          args {
            string_value: "583748586631363416006087"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 3
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eNewsUpdate"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "58374173663136341600604c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "RND.Reset"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5837b26b663136341e006b8b"
          }
        }
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "_DEBUGGER"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iPatron"
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPatron"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5713ceda663136c010001b50"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDNextPatron"
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "bTaxiAvailable"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b26f663136341e006b8c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Random.Dresden"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "58db37b1396630ec8000506f"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "Dresden"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "SamOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Delete Props by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "Dresden"
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "58f709c8396630708b001288"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5904e0ad39663034100050c0"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "58db3cfd396630ec8000510b"
  }
  elseActions {
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "58db37b1396630ec8000506f"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:Dwarf/standing_idle_calm"
          }
        }
      }
    }
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "58f709c8396630708b001288"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Prop"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "Dresden"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "58edb9df3966307423001851"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/decking_dizzy_dumpshock"
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "Dresden"
              }
            }
          }
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_headCradle"
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "SamOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  is_oneshot: true
}
triggers {
  name: "LevelLoad_NewsUpdate [1]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eNewsUpdate"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "SeamstessUnionTickerTapeA"
          }
        }
      }
      args {
        string_value: "                                                    {{00BFFF}}Weather:{{-}} The storm front appears to be moving on, and we can expect some sunshine in the near future.                                                                                           "
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "SeamstessUnionTickerTapeB"
          }
        }
      }
      args {
        string_value: "                                                    {{00FF00}}Local News:{{-}} Police investigation into the Royale Apartment shootout has stalled. Leads unlikely, given the lack of cooperation from the tenants.                                                                                           "
      }
    }
  }
  isActive: true
  idRef {
    id: "51c8f467623331bc13004416"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "LevelLoad_NewsUpdate [2]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eNewsUpdate"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "SeamstessUnionTickerTapeA"
          }
        }
      }
      args {
        string_value: "                                                    {{00FF00}}Entertainment New:{{-}} Superstar Maria Mercurial\'s concert draws larger than expected crowds, despite the rain.  No followup shows have been announced.                                                                                           "
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "SeamstessUnionTickerTapeB"
          }
        }
      }
      args {
        string_value: "                                                    {{00FF00}}Entertainment News:{{-}} Mercurial\'s manager, Armando Hernandez, promises additional tour dates for the Seattle area.                                                                                           "
      }
    }
  }
  isActive: true
  idRef {
    id: "5837fccb6631365403003e98"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "LevelLoad_NewsUpdate [3]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eNewsUpdate"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iCoinFlip"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "SeamstessUnionTickerTapeA"
          }
        }
      }
      args {
        string_value: "                                                    {{000000}}Breaking News:{{-}} Humanis supporter Javin Mendoza found shot to death in a Pikes Place Stuffer Shack.  Racial tensions at an all time high.                                                                                           "
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "SeamstessUnionTickerTapeB"
          }
        }
      }
      args {
        string_value: "                                                    {{00FF00}}Local News:{{-}} Several large lizard corpses were discovered when police investigated a supposedly abandoned facility near Redmond.  How the animals came to the are still under investigation.                                                                                          "
      }
    }
  }
  isActive: true
  idRef {
    id: "5837fccd6631365403003e99"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "58374558663136341600606a"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "<!-- Runner Triggers -->"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "590d92ac396630740a001fcd"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "RND.RunnerPlacement"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eRNDRunnerPlacement"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRunner"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "All Actors With Tag"
          args {
            call_value {
              functionName: "Tag From String"
              args {
                call_value {
                  functionName: "Append (string)"
                  args {
                    call_value {
                      functionName: "Convert (int) to (string)"
                      args {
                        call_value {
                          functionName: "Get Variable (int)"
                          args {
                            string_value: "iRunner"
                          }
                        }
                      }
                    }
                  }
                  args {
                    string_value: "isRunner"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Nearest Tagged Prop to Actor"
              args {
                call_value {
                  functionName: "Tag From String"
                  args {
                    call_value {
                      functionName: "Append (string)"
                      args {
                        call_value {
                          functionName: "Convert (int) to (string)"
                          args {
                            call_value {
                              functionName: "Get Variable (int)"
                              args {
                                string_value: "iRandomPlace"
                              }
                            }
                          }
                        }
                      }
                      args {
                        string_value: "Crew"
                      }
                    }
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Actor)"
                  args {
                    string_value: "5837254a66313660110028f8"
                  }
                }
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRunner"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRandomPlace"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eRNDRunnerPlacement"
          }
        }
      }
      args {
        float_value: 0.1
      }
    }
  }
  isActive: true
  idRef {
    id: "590987af396630301b004398"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "RandomPlacementLimit"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eRNDRunnerPlacement"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRandomPlace"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRandomPlace"
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  isActive: true
  idRef {
    id: "590982cb396630301b004392"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Runner Team Return"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Bartlett"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Seamus"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_River"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Violet"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Paco"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Coyote"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590d9361396630740a001fd0"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590d92ff396630740a001fcf"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590d9495396630740a001fd2"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590d94ac396630740a001fd3"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590d95ce396630740a001fd4"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590d95d6396630740a001fd5"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "590d60bf396630740a001604"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Jon Bartlett"
  events {
  }
  conditions {
    ops {
      functionName: "OR"
      args {
        call_value {
          functionName: "Evaluate Tag for Actor"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "HasOrHasNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isJon"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "OR"
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 2
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isJon"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 3
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isJon"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Bartlett"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "No Effect"
    }
  }
  isActive: true
  idRef {
    id: "590d9361396630740a001fd0"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Seamus OToole"
  events {
  }
  conditions {
    ops {
      functionName: "OR"
      args {
        call_value {
          functionName: "Evaluate Tag for Actor"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "HasOrHasNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSeamus"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "OR"
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 2
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isSeamus"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 3
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isSeamus"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_Recruited_Seamus"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "590d92ff396630740a001fcf"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "River Daye"
  events {
  }
  conditions {
    ops {
      functionName: "OR"
      args {
        call_value {
          functionName: "Evaluate Tag for Actor"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "HasOrHasNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isRiver"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "OR"
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 2
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isRiver"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 3
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isRiver"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_Recruited_River"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "590d9495396630740a001fd2"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Violet Hendrix"
  events {
  }
  conditions {
    ops {
      functionName: "OR"
      args {
        call_value {
          functionName: "Evaluate Tag for Actor"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "HasOrHasNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isViolet"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "OR"
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 2
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isViolet"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 3
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isViolet"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Violet"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "590d94ac396630740a001fd3"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Paco"
  events {
  }
  conditions {
    ops {
      functionName: "OR"
      args {
        call_value {
          functionName: "Evaluate Tag for Actor"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "HasOrHasNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPaco"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "OR"
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 2
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isPaco"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 3
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isPaco"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Paco"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "590d95ce396630740a001fd4"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Paco Loyalty"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
    ops {
      functionName: "AND"
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Story Variable (bool)"
              args {
                string_value: "57084f7c6631365c1600767e"
              }
              args {
                string_value: "bHub_FirstVisit"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "OR"
          args {
            call_value {
              functionName: "Comparison (int)"
              args {
                call_value {
                  functionName: "Get Story Variable (int)"
                  args {
                    string_value: "57084f7c6631365c1600767e"
                  }
                  args {
                    string_value: "Crew_Loyalty_Paco"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "Comparison Ops"
                  }
                  args {
                    int_value: 0
                  }
                }
              }
              args {
                int_value: -2
              }
            }
          }
          args {
            call_value {
              functionName: "Comparison (int)"
              args {
                call_value {
                  functionName: "Get Story Variable (int)"
                  args {
                    string_value: "57084f7c6631365c1600767e"
                  }
                  args {
                    string_value: "Crew_Loyalty_Paco"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "Comparison Ops"
                  }
                  args {
                    int_value: 0
                  }
                }
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Kill Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5904a7a239663034100050b8"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DeathMethod"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Variable (bool)"
          args {
            string_value: "b_PacoLoyalty"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor to Area Around Point"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "5904a7a239663034100050b9"
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Triggering Target Point"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "590e10bd396630800700519d"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Coyote"
  events {
  }
  conditions {
    ops {
      functionName: "OR"
      args {
        call_value {
          functionName: "Evaluate Tag for Actor"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 1
                  }
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "HasOrHasNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isCoyote"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "OR"
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 2
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isCoyote"
                  }
                }
              }
            }
          }
          args {
            call_value {
              functionName: "Evaluate Tag for Actor"
              args {
                call_value {
                  functionName: "Specific Actor"
                  args {
                    call_value {
                      functionName: "Get Map Item (Player)"
                      args {
                        int_value: 3
                      }
                    }
                  }
                  args {
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Preset Value (int)"
                  args {
                    string_value: "HasOrHasNot"
                  }
                  args {
                    int_value: 1
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isCoyote"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (bool)"
      args {
        call_value {
          functionName: "Get Story Variable (bool)"
          args {
            string_value: "57084f7c6631365c1600767e"
          }
          args {
            string_value: "Crew_OnLastRun_Coyote"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "590d95d6396630740a001fd5"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "590d946a396630740a001fd1"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "<!-- Scene Movment [Loyalty Quests] -->"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "583745566631363416006069"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Loyalty.TaxiStation"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "51d30165623331b00f000764"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "5837449c663136341600604e"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5837456e663136341600606b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "PianoDoor"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "7fcd49ac623331e41e000126"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eTeleport"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor With Fade"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "58db3a30396630ec800050cf"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eTeleport"
          }
        }
      }
      args {
        float_value: 0.5
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eMassEffectChatter"
          }
        }
      }
      args {
        float_value: 2
      }
    }
  }
  isActive: true
  idRef {
    id: "58db3990396630ec800050cd"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "RunnerDoor"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "9011d3563030312816002a2d"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eTeleport"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor With Fade"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "58db3ae5396630ec800050d2"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eTeleport"
          }
        }
      }
      args {
        float_value: 0.5
      }
    }
  }
  isActive: true
  idRef {
    id: "58db3aad396630ec800050d0"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "OrganExit"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58db3c06396630ec800050f3"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eTeleport"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor With Fade"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "58db3c59396630ec800050f6"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eTeleport"
          }
        }
      }
      args {
        float_value: 0.5
      }
    }
  }
  isActive: true
  idRef {
    id: "58db3c13396630ec800050f4"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Teleport"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eTeleport"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.25
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Trigger: Wait Until Triggered Again"
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.25
      }
      args {
        float_value: 0.25
      }
    }
  }
  isActive: true
  idRef {
    id: "58ddd0dc39663010ea001a4a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "58377a4c663136141300692d"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "<!-- Generic Interactions  -->"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "58377a4c663136141300692e"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "GI.SamDrawer"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58db37b0396630ec80004eb5"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "SamOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "SamClosed"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Display Text over Point"
      args {
        call_value {
          functionName: "Triggering Target Point"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        string_value: "Sam\'s body is still chilling in the morgue, waiting for the rain to stop and the group to solidify enough to be buried."
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 10
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "58f7139b396630708b00172d"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Trigger: Wait Until Triggered Again"
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "SamClosed"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible by Tag"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "SamOpen"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        float_value: -1
      }
      args {
        call_value {
          functionName: "Everywhere"
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58db37b0396630ec80004eb5"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "58f7139b396630708b00172d"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "GI.InteractPatrons"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5837299566313660110028fc"
          }
        }
      }
    }
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58372e956631363416006035"
          }
        }
      }
    }
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58372ed06631363416006039"
          }
        }
      }
    }
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58372f0b663136341600603b"
          }
        }
      }
    }
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58372e986631363416006036"
          }
        }
      }
    }
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58372eae6631363416006038"
          }
        }
      }
    }
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58372f0a663136341600603a"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add Tag to Prop"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSpeaker"
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Prop"
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Prop (Interactable)"
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 1
          }
          args {
            int_value: 10
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eGenerateConvo"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "58377a5b663136141300692f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.InteractPatrons [5]"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "58372e9a6631363416006037"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add Tag to Prop"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSpeaker"
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Prop"
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Prop (Interactable)"
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 11
          }
          args {
            int_value: 14
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eGenerateConvo"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "58377c2b6631361413006938"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.InteractPatrons [Waitress]"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "40726fab306434d028005bd0"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add Tag to Prop"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSpeaker"
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Prop"
        }
      }
    }
    ops {
      functionName: "Enable/Disable Interactable Object"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Triggering Prop (Interactable)"
        }
      }
    }
    ops {
      functionName: "Set Variable (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (int)"
          args {
            int_value: 15
          }
          args {
            int_value: 20
          }
        }
      }
    }
    ops {
      functionName: "Send Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "eGenerateConvo"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b3a5663136341e006b8d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[1]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Sure has been quiet.   I like it that way."
      }
    }
  }
  isActive: true
  idRef {
    id: "58377fe16631361413006939"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[2]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Sure has been one helluva storm, eh Partner?  Going on what now... A week?"
      }
    }
  }
  isActive: true
  idRef {
    id: "58378025663136141300693a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[3]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "The Ripper Killers been quiet a while.  Where do you think he\'ll strike next?"
      }
    }
  }
  isActive: true
  idRef {
    id: "58378029663136141300693b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[4]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Heard some team really burned up a Yakuza BTL den.   They\'ve been out in force looking for answers."
      }
    }
  }
  isActive: true
  idRef {
    id: "58378029663136141300693c"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[5]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Cherry Bomb\'s been off the last few days.   Think she\'s alright?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837802e663136141300693d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[6]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "The streets been a little chaotic.  Seems some Lieutenant from the Ancients got herself killed in some BTL den."
      }
    }
  }
  isActive: true
  idRef {
    id: "5837802e663136141300693e"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[7]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 7
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Heard rumblings on the street that someones targeting the Space Needle.   Think they could actually get through the security?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837802e663136141300693f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[8-M]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 8
      }
    }
    ops {
      functionName: "Compare Actor Gender"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Gender"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Been working like a dog all week... Just gimme some space, Pal."
      }
    }
  }
  isActive: true
  idRef {
    id: "5837802e6631361413006940"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[8-F]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 8
      }
    }
    ops {
      functionName: "Compare Actor Gender"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Gender"
          }
          args {
            int_value: 2
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Been working like a dog all week... Just gimme some space, Hun."
      }
    }
  }
  isActive: true
  idRef {
    id: "5837827d6631361413006943"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[9]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 9
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Sure is dead in here.   What time do the girls start working?"
      }
    }
  }
  isActive: true
  idRef {
    id: "583780336631361413006941"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[10]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 10
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "I\'m not leaving until I\'m so drunk I can\'t stand... and Kluwe pitches me out into the alley."
      }
    }
  }
  isActive: true
  idRef {
    id: "583780336631361413006942"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[11]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 11
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Damned bathrooms been occupied forever!"
      }
    }
  }
  isActive: true
  idRef {
    id: "583783006631361413006944"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[12]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 12
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Hurry up in there!   Or I\'m gonna need a mop!"
      }
    }
  }
  isActive: true
  idRef {
    id: "583783006631361413006945"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[13]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 13
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Whoever\'s in that bathroom better be dead for taking this long!"
      }
    }
  }
  isActive: true
  idRef {
    id: "583783006631361413006946"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[14]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 14
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Oh Ghost... get outta the damned can!"
      }
    }
  }
  isActive: true
  idRef {
    id: "583783006631361413006947"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[15-M]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 15
      }
    }
    ops {
      functionName: "Compare Actor Gender"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Gender"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Sorry Buddy, I don\'t work the sheets."
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b3e4663136341e006b8f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[15-F]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 15
      }
    }
    ops {
      functionName: "Compare Actor Gender"
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "IsOrIsNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Gender"
          }
          args {
            int_value: 2
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "You\'re cute.   Ever thought of working here?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b41e663136341e006b95"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[16]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 16
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Another hour and I\'m off."
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b3e4663136341e006b90"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[17]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 17
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "Kyle can help you with your drinks."
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b3e4663136341e006b91"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[18]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 18
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "I can\'t remember what I was doing.  I really hope I can go home soon."
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b3e4663136341e006b92"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[19]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 19
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "If one more Casanova wanna be hits on me tonight..."
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b3e4663136341e006b93"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Convo[20]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iConvo"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 20
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sTalker"
          }
        }
      }
      args {
        string_value: "It\'s been a long night... My feet hurt.  What is it that you need, Darling?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b3ff663136341e006b94"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "GI.Speak"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateConvo"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSpeaker"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "$(scene.STalker)"
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 15
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Remove Tag from Actor"
      args {
        call_value {
          functionName: "Get Map Item (SenseTagList)"
          args {
            string_value: "isSpeaker"
          }
        }
      }
      args {
        call_value {
          functionName: "All Actors"
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5837837f6631361413006948"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "DEV - SU HUB"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5837b682663136341e006b96"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "5837b6d1663136341e006b98"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Player)"
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5837b817663136341e006bad"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: " "
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "5837ca73663136341e006cbd"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "<!-- Rumor Mill -->"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: false
  idRef {
    id: "5837ca73663136341e006cbe"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Bartender.Rumor[1]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 1
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Heard that a group of runners got caught trying to get break into some high-security dock facility.   Corp types will be hunting heads for the leak that led them there."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "That\'s what I\'ve heard, anyways.    Anything else I can getcha?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837ca76663136341e006cbf"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[2]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 2
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "You\'ve been reading too many old fantasy books, friend.   Most people these days just order their suds and move on.\n\nNot everybody is as chatting with the old bartenders as you are."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "Anything else I can getcha?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cafb663136341e006cc0"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[3]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Yeah, I have.   I heard that someone thrashed Stevie J\'s place a few days ago.  Rumor has it, same crew burned some Yak BTL facility to the ground a day or two later.\n\nKeep your head down, Chummer... Streets are gonna get bloody on this one."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "That\'s what the streets are saying.   Getcha anything else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cb66663136341e006cd5"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[4]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 4
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Actually yeah, I have.   There is rumor of some high-end tech being moved across town in a civilian convoy.\n\nGood score, if someone could locate that bit of intelligence."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "Dunno how solid the intel is, but that\'s what they\'re saying.   Anything else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbb663136341e006cd6"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[5]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 5
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Ever heard of a club called \"Underworld 93\"?   That big ol\' mascot robot thing they got... It\'s actually a spy station.  Got a direct link up to the Illumanati or the Corp Council or some drek."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "Sounds like a buncha tin-foil hat shit to me... but there it is.   Anything else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbb663136341e006cd7"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[6]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 6
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "I have it on good authority... There is a shipment of some serious military grade hardware sitting in a warehouse down in Tacoma.   \n\nHeard one team already tried to score it and got geeked."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "I can see your wheels turning... But I\'d pass on that.   Too much heat already.   Getcha anything else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbb663136341e006cd8"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[7]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 7
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Rumor has it that Coyote got herself a major payday... How else could she have paid for that new cyberware she\'s sporting.\n\nKabota\'s doc ain\'t cheap..."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "You know these rumors though.   Probably got a rich uncle who kicked.  Need anything else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbe663136341e006cd9"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[8]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 8
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Just a word of advice... Stay away from Stuffer Shacks.   \n\nI dunno what it is about those places, but they seem to be magnets for trouble.  Last one I visited had been shot up by some gangers every night for weeks, until some undercover cop busted the gang up."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "It\'s like someones got a thing for them or something.   Keeps bringing old stuff up.   Anywho... Need something else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbe663136341e006cda"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[9]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 9
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "There\'s been some seriously hinky stuff going on out on Lake Washington.   Boats going missing, bodies washing up on shore full of extra holes... but no official investigations.    \n\nThat scream Corp-Coverup to you?"
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "I\'d steer clear...  And you didn\'t hear it from me.  Anything else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbe663136341e006cdb"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[10]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 10
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Had a guy from Renraku stop in the other night.   Was asking about some crew from a dock-shootout a week or so ago. \n\nOffering big money for the crew\'s whereabouts."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "Get the feeling they\'re fishing.   Anything else ya need?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbe663136341e006cdc"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[11]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 11
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "I heard that Kluwe used to play some professional sport down in the bay area.   Not sure if he was an urban brawler, or what..."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "How cool would that be?  You good?  Need something else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbe663136341e006cdd"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[12]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 12
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Yakuza are searching around for someone who hit one of the new BTL dens.   Guess they lost their server in the process, so they don\'t have much to go on..."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "Seem pretty determined to find something.   Need something else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbbe663136341e006cde"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[13]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 13
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "An NTSB helicopter pilot stopped in the other night.   Guess he lost his job recently when the flight logs got stolen out of his chopper.\n\nThat\'s one angry wage-slave, Omae.   Steer clear of that guy."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "That\'s what I\'ve heard, anyways.    Anything else I can getcha?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbc8663136341e006cdf"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[14]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 14
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "You hear about Mercy Hospital? Guess that Ripper cat was hiding there the whole time. Some seriously twisted nut-job doctor and some freak troll.\n\nWhy don\'t they keep lists of people like that?\n\nNot a problem anymore though. Someone purged that place like the fires of heaven themselves swept through. Good riddance."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "Anything else I can getcha?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbc8663136341e006ce0"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Bartender.Rumor[15]"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eGenerateRumor"
      }
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Variable (int)"
          args {
            string_value: "iRumor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 15
      }
    }
  }
  actions {
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sRumor"
          }
        }
      }
      args {
        string_value: "Heard that an NTSB warehouse was both the site of another Ripper killing, AND assaulted later the same night by not one, but TWO teams.  \n\nWhat kinda drek do you think that place had to warrant that kinda response?   Had to be some seriously hot tech or secrets in there."
      }
    }
    ops {
      functionName: "Set Variable (string)"
      args {
        call_value {
          functionName: "Get Variable (string)"
          args {
            string_value: "sReturn"
          }
        }
      }
      args {
        string_value: "Seems a bit fishy to me.   Too much activity for a low-security gig.   Anyways... need something else?"
      }
    }
  }
  isActive: true
  idRef {
    id: "5837cbc8663136341e006ce1"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: ""
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "5909828d396630301b004390"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "<!--MassEffectChatter-->"
  events {
  }
  conditions {
  }
  actions {
  }
  isActive: true
  idRef {
    id: "59098294396630301b004391"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Paco Loyalty"
  events {
    ops {
      functionName: "On Region Enter"
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "51a12f24616634a81e001378"
          }
        }
      }
    }
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eMassEffectChatter"
      }
    }
  }
  conditions {
    ops {
      functionName: "AND"
      args {
        call_value {
          functionName: "Comparison (bool)"
          args {
            call_value {
              functionName: "Get Variable (bool)"
              args {
                string_value: "b_PacoLoyalty"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "IsOrIsNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "bool"
              }
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Evaluate If Actor is Inside Region"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AreOrAreNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "51a12f24616634a81e001378"
              }
            }
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590e5dab3966308007005b53"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "590d92dd396630740a001fce"
  }
  elseActions {
    ops {
      functionName: "Display Text over Actor"
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5904a7a239663034100050b9"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TextPopupStyle"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        string_value: "$+(l.name) I need to talk to you!"
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 0
      }
      args {
        float_value: 5
      }
      args {
        float_value: 3
      }
      args {
        float_value: 0
      }
    }
  }
  is_oneshot: false
}
triggers {
  name: "Chatter.Coyote and Paco"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "eMassEffectChatter"
      }
    }
  }
  conditions {
    ops {
      functionName: "AND"
      args {
        call_value {
          functionName: "Evaluate If Actor is Inside Region"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Triggering Actor"
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AreOrAreNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "51a12f24616634a81e001378"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Evaluate If Actor is Inside Region"
          args {
            call_value {
              functionName: "Specific Actor"
              args {
                call_value {
                  functionName: "Triggering Actor"
                }
              }
              args {
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AreOrAreNot"
              }
              args {
                int_value: 1
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "51a12f24616634a81e001378"
              }
            }
          }
        }
      }
    }
  }
  actions {
  }
  isActive: true
  idRef {
    id: "590e5dab3966308007005b53"
  }
  elseActions {
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "590e5dab3966308007005b53"
          }
        }
      }
    }
  }
  is_oneshot: false
}
regions {
  name: "Cam.SeamstressUnion"
  position {
    x: -28
    y: -29
    width: 56
    height: 49
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "ebd29ed7643431f821e8391a"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.75686276
    g: 0.74509805
    b: 0.43137255
    a: 1
  }
  ambient_light_color {
    r: 0.26666668
    g: 0.12941177
    b: 0.12941177
    a: 1
  }
  ambience_template: "bar-quiet"
  combat_music: ""
  default_music: ""
  loop_combat_music: false
  loop_default_music: true
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: false
  loop_combat_wrapup_music: false
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Cam.Downstairs"
  position {
    x: -69
    y: -28
    width: 26
    height: 39
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "51a12f24616634a81e001378"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.86666667
    g: 0.65098041
    b: 0.27843139
    a: 1
  }
  ambient_light_color {
    r: 0.34901962
    g: 0.17647059
    b: 0.17647059
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: true
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Cam.HoldingPenActors"
  position {
    x: 12
    y: -49
    width: 8
    height: 10
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "5713ceda663136c010001b50"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "DresdenDesk"
  position {
    x: -37
    y: -60
    width: -1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "58db37b0396630ec80004e5a"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 0.88235295
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Camera Region"
  position {
    x: -76
    y: -74
    width: 52
    height: 32
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "58db37b1396630ec80005056"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.9
    y: -0.7
    z: -0.5
  }
  directional_light_color {
    r: 0.54901963
    g: 0.58823532
    b: 0.42352942
    a: 1
  }
  ambient_light_color {
    r: 0.19607843
    g: 0.13725491
    b: 0.19607843
    a: 1
  }
  ambience_template: "morgue-quiet"
  combat_music: ""
  default_music: "Seattle-Set8-Legwork"
  loop_combat_music: true
  loop_default_music: true
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
patrolRoutes {
  name: "pWaitress"
  pathType: 1
  nodes {
    position {
      x: 11
      z: 1
    }
    index: 0
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  nodes {
    position {
      x: 4
      z: 10
    }
    index: 1
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  nodes {
    position {
      x: -15
      z: 11
    }
    index: 2
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  nodes {
    position {
      x: -7
      z: 7
    }
    index: 3
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  nodes {
    position {
      x: -16
      z: -2
    }
    index: 4
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  nodes {
    position {
      x: -16
      z: -15
    }
    index: 5
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  nodes {
    position {
      x: -12
      z: -10
    }
    index: 6
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  nodes {
    position {
      x: -4
      z: -11
    }
    index: 7
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  nodes {
    position {
      x: -8
      z: -15
    }
    index: 8
    rail_node_pause_time: 0
    rail_node_flip_180_rotation: false
    rail_node_facing: -1
    rail_draw_segment: true
    rail_draw_node: true
  }
  can_move_beyond_node: true
  is_rail: false
  rail_speed: 1
  rail_rotation_time: 4
  idRef {
    id: "583748586631363416006087"
  }
  rail_draw_segments: true
  rail_draw_nodes: true
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 12
    y: 0
    z: 7
  }
  orientation: ORIENTATION_N
  idRef {
    id: "eff5769e643431064e0041b0"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "New Actor"
    pc_spawn_number: 0
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -19
    y: 0
    z: -15.7
  }
  orientation: ORIENTATION_E
  displayName: "Staff"
  idRef {
    id: "403d28ba306434d028005879"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 2
    conversationPoint {
      conversationID: "58372b0066313660110028fd"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Bartender"
  }
  lod: 0
  character_instance {
    prefab_name: "HongKong:Triads/HumanMaleTriad3"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 8
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Kyle"
    pc_spawn_number: -1
    portrait {
      filename: "npc_humanmale_harrow"
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 17
    y: 0
    z: -48
  }
  orientation: ORIENTATION_S
  GeneralTags: "isRunner1"
  displayName: "Crew"
  idRef {
    id: "40703c88306434d028005bce"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "585d9a20393066600c000bdc"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Jon Bartlett?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/JonathanBartlett"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Jon Bartlett"
    GeneralTags: "isRunner1"
    pc_spawn_number: -1
    portrait {
      filename: "Backer_HumanMale_JonathanBartlett_JonBartlett_Tribute"
    }
    karma: 6
    is_prop_character: true
    first_name: "Jon"
    last_name: "Bartlett"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 11
    y: 0
    z: 1
  }
  orientation: ORIENTATION_N
  displayName: "Staff"
  idRef {
    id: "40726fab306434d028005bd0"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Waitress"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Extras/ElfFemaleProstitute"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Waitress"
    pc_spawn_number: -1
    karma: 6
    is_prop_character: false
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -16
    y: 0
    z: -1
  }
  orientation: ORIENTATION_E
  displayName: "Staff"
  idRef {
    id: "54b62398306434c4120044e4"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Story/Loate"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        awareness: 0
        perception: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
    }
    team_id: "Civilians"
    char_name: "Mr. Kluwe"
    pc_spawn_number: -1
    portrait {
      filename: "Backer_TrollMale_ChrisKluwe_Loate"
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 0
    y: 0
    z: 4
  }
  orientation: ORIENTATION_W
  displayName: "Jordan"
  idRef {
    id: "5837254a66313660110028f8"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    inspectInteraction {
      dispalyTime: 0
      fadeTime: 0
      inspectText: "The ghost smiles at you broadly, but says nothing."
      disableAfterInteracting: true
    }
    interaction_info_text: "Talk to Ghost"
  }
  lod: 0
  character_instance {
    prefab_name: "Story/GrizzledVeteran"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Ghost of Grizzled Veteran"
    enabled_at_start: true
    pc_spawn_number: -1
    portrait {
      filename: "NPC_HumanMale_GrizzleVet_ghost"
    }
    karma: 6
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 14
    y: 0
    z: -46
  }
  orientation: ORIENTATION_W
  GeneralTags: "isPatron1"
  GeneralTags: "isPatron"
  displayName: "GI"
  idRef {
    id: "5837299566313660110028fc"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "$(scene.sPatronRollOver)"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Bar Patron 1"
    GeneralTags: "isPatron1"
    GeneralTags: "isPatron"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
    hiring_set_randomizer: "punk_civilian"
    is_prop_character: true
    first_name: "1"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 14
    y: 0
    z: -45
  }
  orientation: ORIENTATION_W
  GeneralTags: "isPatron2"
  GeneralTags: "isPatron"
  displayName: "GI"
  idRef {
    id: "58372e956631363416006035"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "$(scene.sPatronRollOver)"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Bar Patron 2"
    GeneralTags: "isPatron2"
    GeneralTags: "isPatron"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
    hiring_set_randomizer: "hk_poor"
    is_prop_character: true
    first_name: "2"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 15
    y: 0
    z: -45
  }
  orientation: ORIENTATION_N
  GeneralTags: "isPatron6"
  GeneralTags: "isPatron"
  displayName: "GI"
  idRef {
    id: "58372e986631363416006036"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "$(scene.sPatronRollOver)"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Bar Patron 6"
    GeneralTags: "isPatron6"
    GeneralTags: "isPatron"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
    hiring_set_randomizer: "haven_civilian"
    is_prop_character: true
    first_name: "6"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 15
    y: 0
    z: -46
  }
  orientation: ORIENTATION_E
  GeneralTags: "isPatron5"
  GeneralTags: "isPatron"
  displayName: "GI"
  idRef {
    id: "58372e9a6631363416006037"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "$(scene.sPatronRollOver)"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Bar Patron 5"
    GeneralTags: "isPatron5"
    GeneralTags: "isPatron"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
    hiring_set_randomizer: "underground_civilian"
    is_prop_character: true
    first_name: "5"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 15
    y: 0
    z: -44
  }
  orientation: ORIENTATION_E
  GeneralTags: "isPatron7"
  GeneralTags: "isPatron"
  displayName: "GI"
  idRef {
    id: "58372eae6631363416006038"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "$(scene.sPatronRollOver)"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Bar Patron 7"
    GeneralTags: "isPatron7"
    GeneralTags: "isPatron"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
    hiring_set_randomizer: "haven_civilian"
    is_prop_character: true
    first_name: "7"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 14
    y: 0
    z: -44
  }
  orientation: ORIENTATION_N
  GeneralTags: "isPatron3"
  GeneralTags: "isPatron"
  displayName: "GI"
  idRef {
    id: "58372ed06631363416006039"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "$(scene.sPatronRollOver)"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Bar Patron 3"
    GeneralTags: "isPatron3"
    GeneralTags: "isPatron"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
    hiring_set_randomizer: "punk_civilian"
    is_prop_character: true
    first_name: "3"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 15
    y: 0
    z: -43
  }
  orientation: ORIENTATION_S
  GeneralTags: "isPatron8"
  GeneralTags: "isPatron"
  displayName: "GI"
  idRef {
    id: "58372f0a663136341600603a"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "$(scene.sPatronRollOver)"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Bar Patron 8"
    GeneralTags: "isPatron8"
    GeneralTags: "isPatron"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
    hiring_set_randomizer: "haven_civilian"
    is_prop_character: true
    first_name: "8"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 14
    y: 0
    z: -43
  }
  orientation: ORIENTATION_S
  GeneralTags: "isPatron4"
  GeneralTags: "isPatron"
  displayName: "GI"
  idRef {
    id: "58372f0b663136341600603b"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "$(scene.sPatronRollOver)"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollMale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Bar Patron 4"
    GeneralTags: "isPatron4"
    GeneralTags: "isPatron"
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    karma: 6
    hiring_set_randomizer: "punk_civilian"
    is_prop_character: true
    first_name: "4"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -8.8
    y: 0
    z: 12
  }
  orientation: ORIENTATION_S
  displayName: "RainbowSmite"
  idRef {
    id: "58d6f473396630741b00440f"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: ""
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Rainbow?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/ElfFemale"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "NPC_HK_Combat_SecureTrench"
    }
    team_id: "Civilians"
    char_name: "Rainbow"
    pc_spawn_number: -1
    portrait {
      filename: "backer_elffemale_christinamitton"
    }
    portrait_code_override: "s5h2c12"
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -9.3999987
    y: 0
    z: -17.3
  }
  orientation: ORIENTATION_E
  displayName: "Green Lucifer"
  idRef {
    id: "58d9f99a3966303c950039b9"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    dummyInteraciton {
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/GreenLucifer"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Green Lucifer"
    pc_spawn_number: -1
    portrait {
      filename: "npc_elfmale_greenlucifer"
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -51
    y: 0
    z: -72
  }
  orientation: ORIENTATION_S
  GeneralTags: "isJake"
  idRef {
    id: "58db37b0396630ec80004e95"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    prerequisites {
      ops {
        functionName: "Comparison (bool)"
        args {
          call_value {
            functionName: "Get Variable (bool)"
            args {
              string_value: "JakeComplete"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "bool"
            }
            args {
              int_value: 0
            }
          }
        }
      }
    }
    conversationPoint {
      conversationID: "a45289676233311c0a003dd3"
      turnToFace: true
    }
  }
  lod: 0
  character_instance {
    prefab_name: "Story/JakeArmitage"
    character_sheet_id: "Story_Jake"
    equipment_sheet_id: "Story_Jake"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
    }
    team_id: "Civilians"
    char_name: "Jake Armitage"
    GeneralTags: "isJake"
    enabled_at_start: true
    pc_spawn_number: -1
    cyberware_jack: "Datajack"
    portrait {
      filename: "NPC_HumanMale_JakeArmitage"
    }
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -38
    y: 0
    z: -60
  }
  orientation: ORIENTATION_S
  GeneralTags: "Doc"
  idRef {
    id: "58db37b1396630ec8000506f"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 3
    conversationPoint {
      conversationID: "58edc1b03966307423001854"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Dresden?"
  }
  lod: 0
  character_instance {
    prefab_name: "Story/Coroner"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        reaction: 0
        hp: 0
        ap: 0
        morale: 24
        discipline: 24
        awareness: 19
        perception: 0
        authority: 49
        protect_tether_range: 0
        move_speed: 6
      }
      skills {
        ranged_combat: 1
      }
      specializations {
        rifle: 6
      }
      archetypeName: "Non-Combatant"
    }
    team_id: "Civilians"
    char_name: "Dresden"
    GeneralTags: "Doc"
    pc_spawn_number: -1
    portrait {
      filename: "NPC_DwarfMale_Coroner"
    }
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -8
    y: 0
    z: -16.4
  }
  orientation: ORIENTATION_E
  displayName: "Ancient Thug"
  idRef {
    id: "58eb0eea3966308858007ff6"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/ElfMale"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "DeckerJacket"
    }
    team_id: "Civilians"
    char_name: "Battlehawk"
    pc_spawn_number: -1
    portrait {
      filename: "backer_elfmale_andygoolsby"
    }
    portrait_code_override: "s3h16c12b8c12"
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -28.5
    y: 0
    z: -60
  }
  orientation: ORIENTATION_N
  GeneralTags: "Dresden"
  displayName: "Mourner1"
  idRef {
    id: "58eb205639663018dd00293c"
  }
  lod: 0
  character_instance {
    prefab_name: "HongKong:Story/HumanFemaleKindlyCheng"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "New Actor"
    GeneralTags: "Dresden"
    pc_spawn_number: -1
    portrait {
      filename: "NPC_TrollMale_CyberZombie"
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -28.5
    y: 0
    z: -59
  }
  orientation: ORIENTATION_N
  GeneralTags: "Dresden"
  displayName: "Mourner3"
  idRef {
    id: "58eb205f39663018dd00293d"
  }
  lod: 0
  character_instance {
    prefab_name: "HongKong:Story/HumanFemaleLilyLai"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "New Actor"
    GeneralTags: "Dresden"
    pc_spawn_number: -1
    portrait {
      filename: "NPC_TrollMale_CyberZombie"
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -28.5
    y: 0
    z: -58
  }
  orientation: ORIENTATION_N
  GeneralTags: "Dresden"
  displayName: "Mourner2"
  idRef {
    id: "58eb206539663018dd00293e"
  }
  lod: 0
  character_instance {
    prefab_name: "HongKong:Story/HumanFemaleKuFeng"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "New Actor"
    GeneralTags: "Dresden"
    pc_spawn_number: -1
    portrait {
      filename: "NPC_TrollMale_CyberZombie"
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 15.6
    y: 0
    z: -46.6
  }
  orientation: ORIENTATION_E
  displayName: "Cherry Bomb"
  idRef {
    id: "58f70655396630708b001271"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 2
    conversationPoint {
      conversationID: "51d0afca623331241400450b"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Cherry?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/CherryBomb"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Cherry Bomb"
    pc_spawn_number: -1
    portrait {
      filename: "npc_elffemale_cherrybomb"
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 16
    y: 0
    z: -45
  }
  orientation: ORIENTATION_N
  displayName: "Madame Sinful"
  idRef {
    id: "58f709c8396630708b001288"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "51d2ff29623331b00f000753"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Kubota?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/MadameSinful"
    character_sheet_id: "AGChemie_Cyberzombie_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        hp: 0
        ap: 0
        armor: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        dodge: 0
      }
      specializations {
        rifle: 0
        edged: 0
        unarmed: 0
      }
      archetypeName: "Non-Combatant"
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Mistress Kubota"
    pc_spawn_number: -1
    portrait {
      filename: "npc_humanfemale_madamesinful"
    }
    karma: 174
    is_prop_character: true
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 18
    y: 0
    z: -48
  }
  orientation: ORIENTATION_S
  displayName: "PC1"
  idRef {
    id: "5904a6b539663034100050b0"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "Crew1"
    enabled_at_start: true
    pc_spawn_number: 1
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 18
    y: 0
    z: -47
  }
  orientation: ORIENTATION_S
  displayName: "PC2"
  idRef {
    id: "5904a6c839663034100050b1"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "Crew2"
    enabled_at_start: true
    pc_spawn_number: 2
  }
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 18
    y: 0
    z: -46
  }
  orientation: ORIENTATION_S
  displayName: "PC3"
  idRef {
    id: "5904a6ca39663034100050b2"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Non-Combatant"
    }
    team_id: "Shadowrunners"
    char_name: "Crew3"
    enabled_at_start: true
    pc_spawn_number: 3
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 17
    y: 0
    z: -45
  }
  orientation: ORIENTATION_S
  GeneralTags: "isRunner4"
  displayName: "Crew"
  idRef {
    id: "5904a7a239663034100050b3"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "58ce3b53396630f803004fdf"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/TrollFemale"
    character_sheet_id: "Crew_Violet_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Violet_Baggy Lv1"
    }
    equipment {
      prefab_name: "CyberdeckViolet 1"
    }
    team_id: "Civilians"
    char_name: "Violet"
    GeneralTags: "isRunner4"
    pc_spawn_number: -1
    hiring_type: HiringType_Hireable
    portrait {
      filename: "pc_orkfemale_excl_oni"
    }
    description_bio: "A street kid with street muscle who brings her unusal style to the Matrix."
    portrait_code_override: "s6h12c1b0t9"
    karma: 1
    hiring_cost_override: 0
    hiring_tag: "Crew: Decker"
    id: "Crew_Lv1_Violet"
    first_name: "Violet"
    last_name: "Hendrix"
    cyberware_head: "(Head) Datajack"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 17
    y: 0
    z: -46
  }
  orientation: ORIENTATION_S
  GeneralTags: "isRunner3"
  displayName: "Crew"
  idRef {
    id: "5904a7a239663034100050b4"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "58c0eb133966300804007b0a"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to River?"
  }
  lod: 0
  character_instance {
    prefab_name: "HongKong:Triads/ElfFemaleTriad1"
    character_sheet_id: "Crew_River_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "River_Vest Lv1"
    }
    team_id: "Civilians"
    char_name: "River Daye"
    GeneralTags: "isRunner3"
    pc_spawn_number: -1
    hiring_type: HiringType_Hireable
    portrait {
      filename: "STORY_elffemale_River"
    }
    description_bio: "A shaman of Dolphin, River is as changeable as the sea, dealing death or returning those on the edge with ease."
    portrait_code_override: "s3h3c1b0c0t0"
    karma: 1
    hiring_cost_override: 0
    hiring_tag: "Crew: Shaman"
    id: "Crew_Lv1_River"
    first_name: "River"
    last_name: "Daye"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 17
    y: 0
    z: -43
  }
  orientation: ORIENTATION_S
  GeneralTags: "isRunner6"
  displayName: "Coyote"
  idRef {
    id: "5904a7a239663034100050b5"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 3
    conversationPoint {
      conversationID: "51ae8290303031980d006758"
      turnToFace: true
    }
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/CoyoteUgly"
    character_sheet_id: "Lonestar_Lv1_Human_Pistol"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Coyote"
    GeneralTags: "isRunner6"
    enabled_at_start: true
    pc_spawn_number: -1
    portrait {
      filename: "NPC_HumanFemale_CoyoteHealed"
    }
    karma: 30
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 17
    y: 0
    z: -47
  }
  orientation: ORIENTATION_S
  GeneralTags: "isRunner2"
  displayName: "Crew"
  idRef {
    id: "5904a7a239663034100050b7"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "58a94606396630b41800593b"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Seamus?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/DwarfMale"
    character_sheet_id: "Crew_Seamus_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Seamus_Jacket Lv1"
    }
    team_id: "Civilians"
    char_name: "Seamus O\'Toole"
    GeneralTags: "isRunner2"
    pc_spawn_number: -1
    hiring_type: HiringType_Hireable
    portrait {
      filename: "pc_dwarfmale_02b_beardie"
    }
    description_bio: "Seamus trusts in his body, mind, and magic - and in very little else. Well, and single malt whiskey, too."
    portrait_code_override: "s5h10c13b5c13t0"
    karma: 1
    hiring_cost_override: 0
    hiring_tag: "Crew: Mage"
    id: "Crew_Lv1_Seamus"
    first_name: "Seamus"
    last_name: "O\'Toole"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: 17
    y: 0
    z: -44
  }
  orientation: ORIENTATION_S
  GeneralTags: "isRunner5"
  displayName: "Crew"
  idRef {
    id: "5904a7a239663034100050b8"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "590ea0c439663054100050d8"
      turnToFace: true
    }
    interactionIcon: InteractionIcon_Conversation
    interaction_info_text: "Talk to Paco?"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Story/Paco"
    character_sheet_id: "Crew_Paco_Lv1"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "Crew_Drone_Planchada_Low"
    }
    equipment {
      prefab_name: "Paco_Colors Lv1"
    }
    team_id: "Civilians"
    char_name: "Paco"
    GeneralTags: "isRunner5"
    pc_spawn_number: -1
    hiring_type: HiringType_Hireable
    cyberware_left_arm: "Berlin_Induction Datajack"
    portrait {
      filename: "npc_humanmale_paco"
    }
    description_bio: "Ganger and lover, Paco is desperate to prove himself to Coyote and the world."
    portrait_code_override: "s6h6c7b7c7"
    karma: 1
    hiring_cost_override: 0
    hiring_tag: "Crew: Rigger"
    has_fist: false
    id: "Crew_Lv1_Paco"
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -51
    y: 0
    z: -3
  }
  orientation: ORIENTATION_N
  idRef {
    id: "5904a7a239663034100050b9"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "51d08af43236646019001e47"
      turnToFace: true
    }
  }
  lod: 0
  character_instance {
    prefab_name: "Story/SaraCastle"
    character_sheet_id: "BaseCivilian"
    equipment_sheet_id: "Merchant_Doctor_Low"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_paranormal: 0
        etiquette_socialite: 0
        etiquette_infected: 0
        chi_casting: 0
        drain_resistance: 0
        drone_combat: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        throwing_blades: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Dr. Sara Castle"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    portrait {
      filename: "Backer_HumanFemale_SaraCastle_DrSaraCastle_Tribute"
    }
    karma: 6
    hiring_cost_override: 500
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -60
    y: 0
    z: -21
  }
  orientation: ORIENTATION_E
  idRef {
    id: "5904a7a239663034100050ba"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 3
    conversationPoint {
      conversationID: "51b6597d6233315815005171"
      turnToFace: true
    }
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/OrkMale"
    character_sheet_id: "Lonestar_Lv1_Captain"
    equipment_sheet_id: "Merchant_Outfit_Low"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "DeckerFab"
    }
    team_id: "Civilians"
    char_name: "Eric Mersmann"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    portrait {
      filename: "Backer_OrkMale_EricMersmann"
    }
    portrait_code_override: "s3h3c4b0c0t0"
    karma: 44
    hiring_cost_override: 100
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -64
    y: 0
    z: -15
  }
  orientation: ORIENTATION_S
  idRef {
    id: "5904a7a339663034100050bb"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "51d03f9b32366460190018c8"
      turnToFace: true
    }
  }
  lod: 0
  character_instance {
    prefab_name: "Story/MagicDealer"
    character_sheet_id: "BaseCivilian"
    equipment_sheet_id: "Merchant_Magic_Low"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_paranormal: 0
        etiquette_socialite: 0
        etiquette_infected: 0
        chi_casting: 0
        drain_resistance: 0
        drone_combat: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        throwing_blades: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
    }
    team_id: "Civilians"
    char_name: "Aljernon"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    portrait {
      filename: "NPC_ElfMale_MagicDealer"
    }
    karma: 6
    hiring_cost_override: 500
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -52
    y: 0
    z: -23
  }
  orientation: ORIENTATION_E
  idRef {
    id: "5904a7a339663034100050bc"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "51d08d053236646019001fa5"
      turnToFace: true
    }
  }
  lod: 0
  character_instance {
    prefab_name: "Story/Gruberman"
    character_sheet_id: "BaseCivilian"
    equipment_sheet_id: "Merchant_Weapons_Low"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_paranormal: 0
        etiquette_socialite: 0
        etiquette_infected: 0
        chi_casting: 0
        drain_resistance: 0
        drone_combat: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        throwing_blades: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "SamuraiMilitary"
    }
    team_id: "Civilians"
    char_name: "T.B. Gruberman"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    portrait {
      filename: "Backer_OrkMale_JamesHerbert_TheodoreBusterGruberman"
    }
    karma: 6
    hiring_cost_override: 500
    is_prop_character: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -50
    y: 0
    z: -18
  }
  orientation: ORIENTATION_E
  idRef {
    id: "5904a7a339663034100050bd"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "51dd9345623331301d005d8d"
      turnToFace: true
    }
  }
  lod: 0
  character_instance {
    prefab_name: "Core/DwarfMale"
    character_sheet_id: "Lonestar_Lv1_Captain"
    equipment_sheet_id: "Merchant_Tech_Low"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_paranormal: 0
        etiquette_socialite: 0
        etiquette_infected: 0
        chi_casting: 0
        drain_resistance: 0
        drone_combat: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        throwing_blades: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Seek And Destroy"
      attitude: AttitudeAggressive
    }
    equipment {
      prefab_name: "Outfit_Corporate Salaryman"
    }
    team_id: "Civilians"
    char_name: "David Fry II"
    pc_spawn_number: -1
    hiring_type: HiringType_None
    portrait {
      filename: "Backer_DwarfMale_DavidFry"
    }
    portrait_code_override: "s5h4c2b0c0t0"
    karma: 44
    hiring_cost_override: 500
    is_prop_character: true
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sLoyaltyQuest"
    typeName: "string"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iCoinFlip"
    typeName: "int"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iPatron"
    typeName: "int"
  }
}
variables {
  string_value: "{{7CFC00}}"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sCrewStart"
    typeName: "string"
  }
}
variables {
  string_value: "{{-}}"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sCrewEnd"
    typeName: "string"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "bTaxiAvailable"
    typeName: "bool"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sTalker"
    typeName: "string"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iConvo"
    typeName: "int"
  }
}
variables {
  string_value: "Talk to Patron"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sPatronRollOver"
    typeName: "string"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iRumor"
    typeName: "int"
  }
}
variables {
  string_value: ""
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sRumor"
    typeName: "string"
  }
}
variables {
  string_value: "That\'s what I\'ve heard, anyways.    Anything else I can getcha?"
  variableref_value {
    scope: TsVariableScope_Scene
    name: "sReturn"
    typeName: "string"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "b_DresdenAccused"
    typeName: "bool"
  }
}
variables {
  int_value: 1
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iRunner"
    typeName: "int"
  }
}
variables {
  int_value: 1
  variableref_value {
    scope: TsVariableScope_Scene
    name: "iRandomPlace"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "b_PacoLoyalty"
    typeName: "bool"
  }
}
mapEvents: "eRNDPatronPlacement"
mapEvents: "eRNDNextPatron"
mapEvents: "eRNDIdleAnimations"
mapEvents: "eGenerateConvo"
mapEvents: "eGenerateRumor"
mapEvents: "eNewsUpdate"
mapEvents: "eTeleport"
mapEvents: "eMassEffectChatter"
mapEvents: "eRNDRunnerPlacement"
senseTags: "isSpeaker"
senseTags: "isJon"
senseTags: "isSeamus"
senseTags: "isRiver"
senseTags: "isViolet"
senseTags: "isPaco"
senseTags: "isCoyote"
worldMapLocation {
  filename: ""
  location {
    x: 0
    y: 0
  }
}
mapName: "HUB - SeamstressUnion"
parentStory: ""
scene_title: "THE SEAMSTRESSES UNION "
scene_subtitle: ""
scene_synopsis: "$(STORY.SceneSynopsis)\n\n[PLACEHOLDER]\n\nHUB scene for launching loyalty quests.\n\nTaxi- Setup, Asteticially, not functional.\nStage - Two options (Piano Night & Rockfest)\nRumor Mill - 15 rumors for the bartender\nGeneral Interaction - 20 Comments for the randomized bar patrons to discuss.\n\n-DH"
scene_image: "loadingImage_c04-s1"
scene_continue_button_skip: false
scene_restore_runner_health: true
directional_light_dir {
  x: -0.5
  y: -1
  z: -0.75
}
directional_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
ambient_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
allow_drawn_weapons: false
team_affiliations {
  team_name: "Shadowrunners"
  affiliation: 0
  affiliation: 1
  affiliation: 1
  affiliation: 0
}
team_affiliations {
  team_name: "Gangers"
  affiliation: 1
  affiliation: 0
  affiliation: 1
  affiliation: 0
}
team_affiliations {
  team_name: "LoneStar"
  affiliation: 1
  affiliation: 1
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Civilians"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
scene_dimensions {
  dimension_name: "Default"
}
character_roster {
}
show_hiring_screen_on_scene_load: false
scene_hiring_prerequisites {
  prereq_description: ""
  prereq_conditions {
  }
}
hiring_slot_count: 0
hiring_minimum_karma: 0
hiring_maximum_karma: 0
roster_overrides {
}
use_hiring_cost_warning: false
hiring_average_cost: 0
override_hiring_average_cost: false
show_equip_screen_on_scene_load: false
is_persistant: false
is_persistant_has_value: false
can_move_outside_camera_regions: false
can_start_before_triggers: true
can_use_team_advancement: false
