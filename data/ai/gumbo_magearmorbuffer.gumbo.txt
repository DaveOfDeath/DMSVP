// Mage AI, actors with any type of spell but nothing else.

{str,VERSION,0.1c}
{number,MAX_ATTACKS,1}
{number,DEFAULT_LOOPS,1}
{number,SLAVE_SPIRIT_AP,3}
{number,CAN_COMBAT_SHOVE,0}
{number,CAN_SAY,0}
{actor,FLANKED_ATTACKER} //user var holds the flanked attacker from hurt self event
{method,OVERRIDE} //our override user method
{number,PREFER_ARMOR_REDUCED,15}

[DECIDE_MINOR]
? EVALUATE HAS_MOVETO
	RETURN true
? EVALUATE HAS_PATROL
	RETURN true
RETURN false
 
 
[DECIDE_MAJOR]
? IS SELF ~(in_combat) 
	RETURN FALSE

? EVALUATE HAS_MOVETO
	RETURN true
? EVALUATE HAS_PATROL
	RETURN true
? IS ENEMY $(alive)
	RETURN true
RETURN false
 
[MAJOR_START]
RUN MAJOR_ACTIVE
? IS AP>0
    LOOP
RETURN
 
[MAJOR_ACTIVE]
? RUN DO_MOVETO
:? RUN DO_PATROL
:? RUN NORMAL
:? RUN SEARCHER
RETURN
 
[MINOR_START]
RUN DO_MOVETO
RUN DO_PATROL
? IS AP>0
    LOOP
RETURN
 
[SLEEP_START]
RETURN
 
[MAJOR_INTERRUPT_ON]
RETURN
 
[MAJOR_INTERRUPT_OFF]
RETURN
 
[MAJOR_END]
RETURN
 
[HURT_SELF]
REPORT ENEMY
//Have I been hit by someone who has flanked me?
? IS LATEST_ATTACKER $(self_flanked)
	SET FLANKED_ATTACKER LATEST_ATTACKER
	SET OVERRIDE TAKE_COVER_FROM_FLANKED_ATTACKER
RETURN
 
[HURT_FRIENDLY]
RETURN
 
[CAN_ENGAGE]
RETURN ENEMY $(in_range, in_sight)

[NORMAL]
@gate=CAN_ENGAGE
@loops=1
REPORT ENEMY 
RUN CHECK_OVERRIDE
? IS AP = 2
	RUN CHECK_NEAR_FLANKED
RUN CAST_DEFLECT
RUN CHECK_FOR_AOE
RUN CHECK_HEAL
? IS SELF AP >= 2
	DEBUG "2 AP CHOICE"
	? IS random < 60
		? SELECT ENEMY
			? FILTER $(alive, in_range, in_sight, flanked)
				RUN MAGIC_SELECTOR
				? MOVEONLY ACTOR_SELECTION self_cover, sweet_range, one_ap
				:? MOVEONLY ACTOR_SELECTION self_cover, one_ap
				? IS ACTOR_SELECTION $(self_flanked)
					DEBUG "NO GOOD COVER OPTIONS"
					MOVE ACTOR_SELECTION self_cover, sweet_range
					RUN BUFF_N_DEBUFF
					END MAJOR
	GOTO "flank_or_csa"

	ELSE
		LABEL "flank_or_csa"
		? IS random < 70
			RUN CSA
		ELSE	
			? SELECT ENEMY
				? FILTER $(alive, in_range, in_sight, flanked)
					RUN MAGIC_SELECTOR
					? MOVEONLY ACTOR_SELECTION self_cover, sweet_range, one_ap
					:? MOVEONLY ACTOR_SELECTION self_cover, one_ap
					? IS ACTOR_SELECTION $(self_flanked)
						DEBUG "NO GOOD COVER OPTIONS"
						MOVE ACTOR_SELECTION self_cover, sweet_range					
			? SELECT ENEMY
				? FILTER $(alive, in_range, in_sight)
					MOVE ACTOR_SELECTION flanked, sweet_range
					RUN MAGIC_SELECTOR
				ELSE
					RUN SEARCHER
ELSE
DEBUG "1 AP CHOICE"
	? SELECT ENEMY $(alive, in_range, in_sight)
		? IS SELF $(can_attack)
			RUN MAGIC_SELECTOR
		ELSE
			? MOVE ACTOR_SELECTION self_cover, sweet_range, one_ap
				RUN MAGIC_SELECTOR
	ELSE RUN SEARCHER
LOOP //END NORMAL

[TAKE_COVER]
CLEAR OVERRIDE
SELECT ENEMY $(alive, in_sight)
DEBUG ACTOR_SELECTION
? MOVEONLY ACTOR_SELECTION self_cover, sweet_range, two_ap
:? MOVE ACTOR_SELECTION self_cover, sweet_range, two_ap
? IS ACTOR_SELECTION $(self_flanked)
	DEBUG "NO GOOD COVER OPTIONS"
	:? MOVE ACTOR_SELECTION self_cover, one_ap
	DEBUG "LOOKED FOR ONE AP COVER"
	END MAJOR
RETURN

[CAST_DEFLECT]
DEBUG "STARTED DEFLECT"
? SELECT INVENTORY $(on_friendly) && ~(is_coolingdown, aim_effect)
	DEBUG "SELECTED DEFLECT"
	? SELECT FRIENDLY $(alive, in_sight) && ~(is_buffed)
		DEBUG "WANT TO CAST DEFLECT"
		DO ITEM_SELECTION
		CLEAR ACTOR_SELECTION
RETURN

[CHECK_FOR_AOE]
? SELECT ENEMY $(alive, in_range, in_sight, is_grouped)
	? SELECT INVENTORY (attack, magic, aoe) && ~(is_coolingdown)
		? DO $(attack, magic, aoe)
			SET OVERRIDE TAKE_COVER
RETURN

[MAGIC_SELECTOR]
? IS random >= 85
	DO $(attack, ranged, aoe)
	DO $(attack, ranged) && ~(aoe)
	END MAJOR	
ELSE
	DO $(attack, ranged) && ~(aoe)
	DO $(attack, ranged, aoe)	
	END MAJOR
	
	
[CSA]
? SELECT ENEMY $(alive, in_range, in_sight)
	? IS ACTOR_SELECTION $(self_flanked)
		MOVE ACTOR_SELECTION self_cover
RUN BUFF_N_DEBUFF

? SELECT ENEMY $(alive, in_range, in_sight)
	DO $(attack, magic) && ~(aoe) 
RETURN
	
[BUFF_N_DEBUFF]
? IS random > 60
	? SELECT INVENTORY $(buff) && ~(is_coolingdown)
		DEBUG "CHOSE BUFF"
		? SELECT FRIENDLY $(alive, in_sight) && ~(is_buffed)
			DO ITEM_SELECTION
			CLEAR ACTOR_SELECTION
		:? IS SELF ~(is_buffed)
				DO SELF $(buff)
				CLEAR ACTOR_SELECTION
		:? SELECT INVENTORY $(debuff) && ~(is_coolingdown)
			? SELECT ENEMY $(alive, in_range, in_sight) && ~(is_debuffed)
				DO ACTOR_SELECTION $(debuff)
:? SELECT INVENTORY $(debuff) && ~(is_coolingdown)
		DEBUG "CHOSE DEBUFF"
		? SELECT ENEMY $(alive, in_sight) && ~(is_debuffed)
			DO ITEM_SELECTION
			CLEAR ACTOR_SELECTION
		:? SELECT INVENTORY $(buff) && ~(is_coolingdown)
			? SELECT FRIENDLY $(alive, in_range, in_sight) && ~(is_buffed)
				DO ACTOR_SELECTION $(buff)
				CLEAR ACTOR_SELECTION
CLEAR ACTOR_SELECTION
RETURN		
 
[CHECK_OVERRIDE]
? HAS OVERRIDE
	RUN OVERRIDE
RETURN
	
[CHECK_HEAL]
? IS SELF hp < maxhp*6/10 AND $(in_cover)
	SELECT SELF
	DO $(heal)
	RETURN
? SELECT FRIENDLY hp < maxhp*6/10
	SELECT ACTOR_SELECTION
	DO $(heal)
	SELECT ENEMY $(alive, in_range, in_sight)
	MOVE in_cover, in_range

[CHECK_NEAR_FLANKED]
? SELECT ENEMY $(alive, in_range, in_sight, self_flanked) && (dist <= 6)
	DEBUG ACTOR_SELECTION
		MOVE ACTOR_SELECTION self_cover, sweet_range
		RUN MAGIC_SELECTOR
		END MAJOR
		RETURN
RETURN
	
[TAKE_COVER_FROM_FLANKED_ATTACKER]
CLEAR OVERRIDE
DEBUG FLANKED_ATTACKER
? IS FLANKED_ATTACKER $(self_flanked)
	? MOVEONLY FLANKED_ATTACKER self_cover, sweet_range, one_ap
		RUN BUFF_N_DEBUFF
		RUN MAGIC_SELECTOR
		END MAJOR		
	:? MOVEONLY FLANKED_ATTACKER self_cover, one_ap
		RUN BUFF_N_DEBUFF
		RUN MAGIC_SELECTOR
		END MAJOR
	:? MOVEONLY FLANKED_ATTACKER self_cover, sweet_range, two_ap
		? MOVEONLY FLANKED_ATTACKER self_cover, one_ap
			RUN BUFF_N_DEBUFF
			RUN MAGIC_SELECTOR
			END MAJOR
	:? MOVEONLY FLANKED_ATTACKER self_cover, two_ap
		? MOVEONLY FLANKED_ATTACKER self_cover, one_ap
			RUN BUFF_N_DEBUFF
			RUN MAGIC_SELECTOR
			END MAJOR
	? IS FLANKED_ATTACKER $(self_flanked)
		? MOVEONLY FLANKED_ATTACKER self_cover, sweet_range, one_ap
			RUN BUFF_N_DEBUFF
			RUN MAGIC_SELECTOR
			END MAJOR
		:? MOVEONLY FLANKED_ATTACKER self_cover, one_ap
			RUN BUFF_N_DEBUFF
			RUN MAGIC_SELECTOR
			END MAJOR			
RETURN
 
			
[SEARCHER]
@loops=3
? SELECT ENEMY $(alive)
	DEBUG "Search for" ACTOR_SELECTION
:
	DEBUG "Search for nobody"
LOOK ACTOR_SELECTION
? SELECT ITEM_FAVORED
	//DEBUG "Search with favored" ITEM_SELECTION
:? SELECT INVENTORY $(attack)
	//DEBUG "Search with inventory item" ITEM_SELECTION
:
	//DEBUG "Search with no item"
? MOVEONLY ACTOR_SELECTION self_cover, in_sight, in_range, forward, two_ap
	//DEBUG "Searching TO COVER" ACTOR_SELECTION
:? MOVE ACTOR_SELECTION in_sight, in_range
	//DEBUG "Searching anywhere" ACTOR_SELECTION
:? MOVE ACTOR_SELECTION
	DEBUG "Searching fallback" ACTOR_SELECTION
? SELECT ENEMY $(alive, in_range, in_sight) // now i can see an enemy
	RETURN
LOOP
 
[HAS_MOVETO]
RETURN SELF $(moveto)

[DO_MOVETO]
@gate=HAS_MOVETO
@loops=3
MOVE moveto
LOOP

[HAS_PATROL]
RETURN SELF $(patrol)

[DO_PATROL]
@loops=3
@gate=HAS_PATROL
MOVE patrol
LOOP